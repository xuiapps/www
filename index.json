{
  "ai/gigi.html": {
    "href": "ai/gigi.html",
    "title": "Meet Gigi – Your DevRel Assistant | XUI APPS",
    "summary": "Meet Gigi – Your DevRel Assistant Hi! I’m Gigi – your ChatGPT-powered assistant here to help you build with Xui. Ask me anything about layout, rendering, animations, or platform quirks. Whether you're debugging or dreaming big, I’m just a prompt away. How to Use Gigi Use these prompt examples to get started: “How do I align text to the bottom right in Xui?” “What’s the difference between Frame and Rect?” “How does layout collapsing work in Xui?” “Help me render SVG paths in a custom view.” “Show me how to animate a tab switch.” Tip: The more specific you are, the better my answers will be! Gigi’s Knowledge Base Here are some questions I’ve already answered for Xui devs: MAUI vs Xui – what’s different? How does text rendering work in Xui? Can I use Xui to simulate a phone UI on desktop? How does margin collapsing work in layout? What is EmulatorWindow and what does it do? More answers are added every week. Got a tricky question? Ask away! Avatars of Gigi You’ll see me all around the site! Here's a peek at some of my looks: Curious Thinking Pointing Winking (Coming soon: stickers, expressions, and maybe even holograms...) Stay in the Loop You can also catch me in videos on TikTok and inside future Xui developer tools. Let’s make UI magic together."
  },
  "api/Xui.Core.Abstract.Application.html": {
    "href": "api/Xui.Core.Abstract.Application.html",
    "title": "Class Application | XUI APPS",
    "summary": "Class Application Namespace Xui.Core.Abstract Assembly Core.dll Represents an abstract base class for Xui applications. This class is paired at runtime with a platform-specific counterpart, which delegates to actual system APIs on macOS, Windows, Android, etc. Users should subclass Application, override the Start() method, and call Run() to launch the application. public abstract class Application Inheritance object Application Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Application() Initializes a new instance of the Application class. public Application() Methods Run() Starts the main application loop by delegating to the platform-specific run loop. This method may block until the application exits, or may return immediately if the platform bootstraps a runtime loop before instantiating the app delegate. public int Run() Returns int The application’s exit code. Start() Called by the runtime after initialization. Override this method to set up application state and display the initial UI. public abstract void Start()"
  },
  "api/Xui.Core.Abstract.Events.DeleteBackwardsEventRef.html": {
    "href": "api/Xui.Core.Abstract.Events.DeleteBackwardsEventRef.html",
    "title": "Struct DeleteBackwardsEventRef | XUI APPS",
    "summary": "Struct DeleteBackwardsEventRef Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a platform-level input event requesting deletion of content positioned logically before the caret or selection range. Typically triggered by a \"Backspace\" key press or an equivalent gesture. public ref struct DeleteBackwardsEventRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This event originates from the Actual window layer and is forwarded to the Abstract window for dispatching through the view hierarchy. It is intended to be routed to the appropriate focused or editable view. Constructors DeleteBackwardsEventRef() Initializes a new instance of the DeleteBackwardsEventRef struct. public DeleteBackwardsEventRef()"
  },
  "api/Xui.Core.Abstract.Events.FrameEventRef.html": {
    "href": "api/Xui.Core.Abstract.Events.FrameEventRef.html",
    "title": "Struct FrameEventRef | XUI APPS",
    "summary": "Struct FrameEventRef Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a platform-level event dispatched once per frame, providing timing information used for driving animations and visual updates. public ref struct FrameEventRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This event is emitted from the Actual window and forwarded to the Abstract window, typically during the animation phase of the UI lifecycle. It provides both the previous and next frame times, along with the time delta between them. Consumers can use this data to advance animations or perform time-based layout updates. Constructors FrameEventRef(TimeSpan, TimeSpan) Initializes a new instance of the FrameEventRef struct with the given previous and next frame timestamps. public FrameEventRef(TimeSpan previous, TimeSpan next) Parameters previous TimeSpan The timestamp of the previous frame. next TimeSpan The timestamp of the upcoming frame. Fields Delta The time elapsed between the previous and next frames. public TimeSpan Delta Field Value TimeSpan Next The timestamp of the upcoming frame. public TimeSpan Next Field Value TimeSpan Previous The timestamp of the previous frame. public TimeSpan Previous Field Value TimeSpan"
  },
  "api/Xui.Core.Abstract.Events.InsertTextEventRef.html": {
    "href": "api/Xui.Core.Abstract.Events.InsertTextEventRef.html",
    "title": "Struct InsertTextEventRef | XUI APPS",
    "summary": "Struct InsertTextEventRef Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a platform-level input event requesting insertion of text at the current caret or selection position. public ref struct InsertTextEventRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This event originates from the Actual window and is forwarded to the Abstract layer for dispatch through the view hierarchy. It is typically triggered by user input such as typing characters, pasting from the clipboard, or text input from IMEs. Constructors InsertTextEventRef(string) Initializes a new instance of the InsertTextEventRef struct with the specified text to insert. public InsertTextEventRef(string text) Parameters text string The string of text to be inserted. Fields Text The text to be inserted into the current input context. public readonly string Text Field Value string"
  },
  "api/Xui.Core.Abstract.Events.MouseButton.html": {
    "href": "api/Xui.Core.Abstract.Events.MouseButton.html",
    "title": "Enum MouseButton | XUI APPS",
    "summary": "Enum MouseButton Namespace Xui.Core.Abstract.Events Assembly Core.dll Identifies a specific mouse button involved in a pointer event. public enum MouseButton Fields Left = 0 The left mouse button, typically used for primary actions like selection or dragging. Other = 2 Any other mouse button, such as middle-click or additional buttons on advanced mice. Right = 1 The right mouse button, typically used for context menus or alternate actions."
  },
  "api/Xui.Core.Abstract.Events.MouseDownEventRef.html": {
    "href": "api/Xui.Core.Abstract.Events.MouseDownEventRef.html",
    "title": "Struct MouseDownEventRef | XUI APPS",
    "summary": "Struct MouseDownEventRef Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a platform-level input event indicating that a mouse button was pressed at a given position. public ref struct MouseDownEventRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This event is dispatched by the Actual window and forwarded to the Abstract layer for routing through the view hierarchy. It may be used to initiate focus, dragging, selection, or other pointer interactions. Fields Button The mouse button that was pressed. public MouseButton Button Field Value MouseButton Position The position of the mouse pointer at the time of the event, in logical window coordinates. public Point Position Field Value Point"
  },
  "api/Xui.Core.Abstract.Events.MouseMoveEventRef.html": {
    "href": "api/Xui.Core.Abstract.Events.MouseMoveEventRef.html",
    "title": "Struct MouseMoveEventRef | XUI APPS",
    "summary": "Struct MouseMoveEventRef Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a platform-level input event indicating that the mouse pointer has moved to a new position. public ref struct MouseMoveEventRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This event is dispatched by the Actual window and forwarded to the Abstract layer for routing through the view hierarchy. It is typically used to trigger hover effects, cursor updates, or to track dragging or gesture movement. Fields Position The current position of the mouse pointer in logical window coordinates. public Point Position Field Value Point"
  },
  "api/Xui.Core.Abstract.Events.MouseUpEventRef.html": {
    "href": "api/Xui.Core.Abstract.Events.MouseUpEventRef.html",
    "title": "Struct MouseUpEventRef | XUI APPS",
    "summary": "Struct MouseUpEventRef Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a platform-level input event indicating that a mouse button was released at a given position. public ref struct MouseUpEventRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This event is dispatched by the Actual window and forwarded to the Abstract layer for routing through the view hierarchy. It is typically used to complete interactions such as clicks, drags, or other pointer-driven gestures. Fields Button The mouse button that was released. public MouseButton Button Field Value MouseButton Position The position of the mouse pointer at the time of the event, in logical window coordinates. public Point Position Field Value Point"
  },
  "api/Xui.Core.Abstract.Events.RenderEventRef.html": {
    "href": "api/Xui.Core.Abstract.Events.RenderEventRef.html",
    "title": "Struct RenderEventRef | XUI APPS",
    "summary": "Struct RenderEventRef Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a platform-level render event dispatched after a timing frame, indicating that views should perform layout and rendering operations within a given region. public ref struct RenderEventRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This event follows a FrameEventRef and marks the phase during which views are expected to perform their Measure, Arrange, and Render passes. It is emitted by the Actual window and forwarded to the Abstract layer. Constructors RenderEventRef(Rect, FrameEventRef) Initializes a new instance of the RenderEventRef struct with the given invalidation region and frame timing data. public RenderEventRef(Rect rect, FrameEventRef frame) Parameters rect Rect The region to be rendered. frame FrameEventRef The timing information for this frame. Fields Frame Timing information associated with this frame, typically used for animations. public FrameEventRef Frame Field Value FrameEventRef Rect The region of the screen or surface that should be re-rendered. public Rect Rect Field Value Rect"
  },
  "api/Xui.Core.Abstract.Events.ScrollWheelEventRef.html": {
    "href": "api/Xui.Core.Abstract.Events.ScrollWheelEventRef.html",
    "title": "Struct ScrollWheelEventRef | XUI APPS",
    "summary": "Struct ScrollWheelEventRef Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a platform-level input event generated by a scroll wheel or trackpad gesture, indicating a change in scroll position. public ref struct ScrollWheelEventRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This event is dispatched by the Actual window and forwarded to the Abstract layer for routing through the view hierarchy. It may be used to scroll content, zoom views, or trigger kinetic effects, depending on platform and modifier keys. Fields Delta The scroll delta, typically measured in logical units per axis. Positive Y values usually indicate upward scrolling. public Vector Delta Field Value Vector"
  },
  "api/Xui.Core.Abstract.Events.Touch.html": {
    "href": "api/Xui.Core.Abstract.Events.Touch.html",
    "title": "Struct Touch | XUI APPS",
    "summary": "Struct Touch Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a single touch point within a multi-touch input event. public struct Touch Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure contains identifying and positional data for a specific finger or contact point on a touch surface. Multiple Touch instances may be reported in a single event when handling gestures or complex touch interactions. Fields Index A unique index identifying this touch point during its lifetime. Typically assigned by the platform and reused after release. public long Index Field Value long Phase The current phase of the touch (e.g., began, moved, ended). public TouchPhase Phase Field Value TouchPhase Position The current position of the touch in logical window coordinates. public Point Position Field Value Point Radius The estimated contact radius of the touch, in logical units. Used for gesture recognition or pressure emulation. public NFloat Radius Field Value NFloat"
  },
  "api/Xui.Core.Abstract.Events.TouchEventRef.html": {
    "href": "api/Xui.Core.Abstract.Events.TouchEventRef.html",
    "title": "Struct TouchEventRef | XUI APPS",
    "summary": "Struct TouchEventRef Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a platform-level input event containing one or more touch points, typically originating from a touchscreen or trackpad gesture. public ref struct TouchEventRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This event is dispatched by the Actual window and forwarded to the Abstract layer for routing through the view hierarchy. It includes all active touch points for the current frame, allowing gesture recognition, hit testing, and view interaction logic. Constructors TouchEventRef(ReadOnlySpan<Touch>) Initializes a new instance of the TouchEventRef struct with the provided set of touch points. public TouchEventRef(ReadOnlySpan<Touch> touches) Parameters touches ReadOnlySpan<Touch> A span of active touch data. Fields Touches A span of all current touch points involved in this event. public readonly ReadOnlySpan<Touch> Touches Field Value ReadOnlySpan<Touch>"
  },
  "api/Xui.Core.Abstract.Events.TouchPhase.html": {
    "href": "api/Xui.Core.Abstract.Events.TouchPhase.html",
    "title": "Enum TouchPhase | XUI APPS",
    "summary": "Enum TouchPhase Namespace Xui.Core.Abstract.Events Assembly Core.dll Describes the phase of an individual touch point during a touch event. public enum TouchPhase Fields End = 2 The touch has ended (finger or stylus lifted off the surface). Move = 1 The touch is actively moving across the surface. Start = 0 The touch has just started (finger or stylus contacted the surface)."
  },
  "api/Xui.Core.Abstract.Events.WindowHitTestEventRef.WindowArea.html": {
    "href": "api/Xui.Core.Abstract.Events.WindowHitTestEventRef.WindowArea.html",
    "title": "Enum WindowHitTestEventRef.WindowArea | XUI APPS",
    "summary": "Enum WindowHitTestEventRef.WindowArea Namespace Xui.Core.Abstract.Events Assembly Core.dll Describes the purpose or function of a region within a window. public enum WindowHitTestEventRef.WindowArea : uint Fields BorderBottom = 9 Bottom edge resize border. BorderBottomLeft = 10 Bottom-left resize corner. BorderBottomRight = 8 Bottom-right resize corner. BorderLeft = 11 Left edge resize border. BorderRight = 7 Right edge resize border. BorderTop = 5 Top edge resize border. BorderTopLeft = 4 Top-left resize corner. BorderTopRight = 6 Top-right resize corner. Client = 2 The area represents the client region of the window (normal content). Default = 0 The area is unspecified; the platform should handle it normally. Title = 3 The area represents a draggable title bar region. Transparent = 1 The area is transparent to hit testing and should not trigger drag or resize."
  },
  "api/Xui.Core.Abstract.Events.WindowHitTestEventRef.html": {
    "href": "api/Xui.Core.Abstract.Events.WindowHitTestEventRef.html",
    "title": "Struct WindowHitTestEventRef | XUI APPS",
    "summary": "Struct WindowHitTestEventRef Namespace Xui.Core.Abstract.Events Assembly Core.dll Represents a platform-level hit test event that allows the application to define how a point within a custom window frame should be interpreted (e.g., as a draggable title bar, resize border, or transparent region). public ref struct WindowHitTestEventRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This event is dispatched when the user interacts with the non-client area of a custom-framed window (such as the emulator window or a styled installer). It is primarily used on platforms like Windows that support fine-grained window frame interaction via hit testing. On macOS and other platforms where native support is unavailable, this event may be ignored or implemented through custom code. Constructors WindowHitTestEventRef(Point, Rect) Initializes a new instance of the WindowHitTestEventRef struct. public WindowHitTestEventRef(Point point, Rect window) Parameters point Point The location of the pointer input. window Rect The bounds of the target window. Fields Area The result of the hit test, set by the application to control how the system should interpret the hit location. public WindowHitTestEventRef.WindowArea Area Field Value WindowHitTestEventRef.WindowArea Point The location of the hit test, in logical window coordinates. public Point Point Field Value Point Window The bounds of the entire window, in logical coordinates. This may be used to determine edge proximity for resizing logic. public Rect Window Field Value Rect"
  },
  "api/Xui.Core.Abstract.Events.html": {
    "href": "api/Xui.Core.Abstract.Events.html",
    "title": "Namespace Xui.Core.Abstract.Events | XUI APPS",
    "summary": "Namespace Xui.Core.Abstract.Events Structs DeleteBackwardsEventRef Represents a platform-level input event requesting deletion of content positioned logically before the caret or selection range. Typically triggered by a \"Backspace\" key press or an equivalent gesture. FrameEventRef Represents a platform-level event dispatched once per frame, providing timing information used for driving animations and visual updates. InsertTextEventRef Represents a platform-level input event requesting insertion of text at the current caret or selection position. MouseDownEventRef Represents a platform-level input event indicating that a mouse button was pressed at a given position. MouseMoveEventRef Represents a platform-level input event indicating that the mouse pointer has moved to a new position. MouseUpEventRef Represents a platform-level input event indicating that a mouse button was released at a given position. RenderEventRef Represents a platform-level render event dispatched after a timing frame, indicating that views should perform layout and rendering operations within a given region. ScrollWheelEventRef Represents a platform-level input event generated by a scroll wheel or trackpad gesture, indicating a change in scroll position. Touch Represents a single touch point within a multi-touch input event. TouchEventRef Represents a platform-level input event containing one or more touch points, typically originating from a touchscreen or trackpad gesture. WindowHitTestEventRef Represents a platform-level hit test event that allows the application to define how a point within a custom window frame should be interpreted (e.g., as a draggable title bar, resize border, or transparent region). Enums MouseButton Identifies a specific mouse button involved in a pointer event. TouchPhase Describes the phase of an individual touch point during a touch event. WindowHitTestEventRef.WindowArea Describes the purpose or function of a region within a window."
  },
  "api/Xui.Core.Abstract.HotReload.html": {
    "href": "api/Xui.Core.Abstract.HotReload.html",
    "title": "Class HotReload | XUI APPS",
    "summary": "Class HotReload Namespace Xui.Core.Abstract Assembly Core.dll Internal integration point for .NET's MetadataUpdateHandler, enabling partial support for Hot Reload during development. This is not a stable API and should not be used by application developers. public static class HotReload Inheritance object HotReload Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This type is invoked automatically by the runtime when types are updated via Edit and Continue or Hot Reload. However, Hot Reload support in Xui is limited, and application developers should rely on full rebuilds for consistent behavior. The current implementation simply invalidates open windows and clears transient caches, without attempting to rehydrate or diff application state. Methods ClearCache(Type[]?) Called by the runtime to clear any cached data after a hot reload. Not intended for use by application developers. public static void ClearCache(Type[]? updatedTypes) Parameters updatedTypes Type[] The list of updated types, if available. MainThreadUpdateApplication(Type[]?) Performs a synchronous application update on the main thread. This currently forces all open windows to re-render. public static void MainThreadUpdateApplication(Type[]? updatedTypes) Parameters updatedTypes Type[] The list of updated types, if available. UpdateApplication(Type[]?) Posts a request to the main UI dispatcher to refresh application state. public static void UpdateApplication(Type[]? updatedTypes) Parameters updatedTypes Type[] The list of updated types, if available."
  },
  "api/Xui.Core.Abstract.IWindow.IDesktopStyle.html": {
    "href": "api/Xui.Core.Abstract.IWindow.IDesktopStyle.html",
    "title": "Interface IWindow.IDesktopStyle | XUI APPS",
    "summary": "Interface IWindow.IDesktopStyle Namespace Xui.Core.Abstract Assembly Core.dll Provides optional desktop-specific window styling hints for platforms that support multiple top-level windows (e.g., Windows, macOS, Linux). public interface IWindow.IDesktopStyle Remarks On mobile platforms, applications typically run in a single full-screen window, and this interface has no effect. On desktop, implementing this interface allows apps to influence window chrome, border visibility, and initial sizing. Properties Chromeless If true, the window will be created without a system title bar or border. The entire surface will be treated as a client area, while still maintaining standard desktop window behaviors (e.g., close/minimize buttons). bool Chromeless { get; } Property Value bool StartupSize Optional startup size hint for the window. If null, the platform will decide the initial size. Size? StartupSize { get; } Property Value Size?"
  },
  "api/Xui.Core.Abstract.IWindow.ISoftKeyboard.html": {
    "href": "api/Xui.Core.Abstract.IWindow.ISoftKeyboard.html",
    "title": "Interface IWindow.ISoftKeyboard | XUI APPS",
    "summary": "Interface IWindow.ISoftKeyboard Namespace Xui.Core.Abstract Assembly Core.dll Represents a handler for software keyboard input. public interface IWindow.ISoftKeyboard Remarks This interface allows focused views to receive input from the system's software keyboard, typically used on mobile platforms and the emulator. It handles character insertion and backward deletion commands. This is not meant to expose full IME or keyboard layout logic—just basic input dispatch. Methods DeleteBackwards(ref DeleteBackwardsEventRef) Requests deletion of content preceding the caret or selection. void DeleteBackwards(ref DeleteBackwardsEventRef eventRef) Parameters eventRef DeleteBackwardsEventRef The input event representing a backspace action. InsertText(ref InsertTextEventRef) Requests insertion of one or more characters into the current input context. void InsertText(ref InsertTextEventRef eventRef) Parameters eventRef InsertTextEventRef The input event containing the text to insert."
  },
  "api/Xui.Core.Abstract.IWindow.html": {
    "href": "api/Xui.Core.Abstract.IWindow.html",
    "title": "Interface IWindow | XUI APPS",
    "summary": "Interface IWindow Namespace Xui.Core.Abstract Assembly Core.dll Defines the abstract interface for a platform window in Xui. This surface hosts rendering, input handling, and layout updates. public interface IWindow Remarks Implementations of this interface bridge platform-specific Actual windowing with the framework’s abstract layer. It is used both for physical windows (e.g. desktop apps) and virtual windows (e.g. emulator windows). Properties DisplayArea Gets or sets the total visible area of the window, including content that may be obscured by hardware cutouts, rounded corners, or system UI overlays. Rect DisplayArea { get; set; } Property Value Rect Remarks Used by the layout system to determine the full available size. SafeArea Gets or sets the \"safe\" area of the window, excluding obstructions like notches or status bars. Important UI elements should be placed within this area. Rect SafeArea { get; set; } Property Value Rect Remarks Especially relevant on mobile devices and in emulator scenarios. Methods Closed() Invoked when the window is closed and cleanup should occur. void Closed() Closing() Invoked before the window closes. Returning false can cancel the closure. bool Closing() Returns bool true if the window may close; otherwise, false. OnAnimationFrame(ref FrameEventRef) Invoked once per frame to propagate animation timing information. void OnAnimationFrame(ref FrameEventRef animationFrame) Parameters animationFrame FrameEventRef Timing details for the current animation frame. OnMouseDown(ref MouseDownEventRef) Invoked when a mouse button is pressed within the window. void OnMouseDown(ref MouseDownEventRef evRef) Parameters evRef MouseDownEventRef The mouse down event data. OnMouseMove(ref MouseMoveEventRef) Invoked when the mouse is moved within the window. void OnMouseMove(ref MouseMoveEventRef evRef) Parameters evRef MouseMoveEventRef The mouse movement event data. OnMouseUp(ref MouseUpEventRef) Invoked when a mouse button is released within the window. void OnMouseUp(ref MouseUpEventRef evRef) Parameters evRef MouseUpEventRef The mouse up event data. OnScrollWheel(ref ScrollWheelEventRef) Invoked when the scroll wheel is used within the window. void OnScrollWheel(ref ScrollWheelEventRef evRef) Parameters evRef ScrollWheelEventRef The scroll wheel event data. OnTouch(ref TouchEventRef) Invoked when touch input occurs within the window. void OnTouch(ref TouchEventRef touchEventRef) Parameters touchEventRef TouchEventRef The touch event data. Render(ref RenderEventRef) Invoked during the render phase of the UI lifecycle. Responsible for triggering layout and visual updates. void Render(ref RenderEventRef render) Parameters render RenderEventRef The render event data, including target rect and frame info. WindowHitTest(ref WindowHitTestEventRef) Invoked when the system requests a hit test for window interaction. Allows the app to indicate whether a region is draggable, resizable, etc. void WindowHitTest(ref WindowHitTestEventRef evRef) Parameters evRef WindowHitTestEventRef The hit test event containing pointer position and window bounds."
  },
  "api/Xui.Core.Abstract.Window.html": {
    "href": "api/Xui.Core.Abstract.Window.html",
    "title": "Class Window | XUI APPS",
    "summary": "Class Window Namespace Xui.Core.Abstract Assembly Core.dll Represents an abstract cross-platform application window in Xui. Handles input, rendering, layout, and software keyboard integration. public abstract class Window : IWindow, IWindow.ISoftKeyboard Inheritance object Window Implements IWindow IWindow.ISoftKeyboard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class connects the abstract UI framework with the underlying platform window, acting as a root container for layout and visual composition. Subclasses may override specific input or rendering behaviors as needed. Constructors Window() Initializes a new instance of the Window class. This creates the backing platform window. public Window() Fields OpenWindows Gets a read-only list of all currently open Xui windows. public static IReadOnlyList<Window> OpenWindows Field Value IReadOnlyList<Window> Properties Actual Gets the underlying platform-specific window instance. public IWindow Actual { get; } Property Value IWindow Content The root view of the window's content hierarchy. public virtual View? Content { get; set; } Property Value View DisplayArea Gets or sets the total visible area of the window, including content that may be obscured by hardware cutouts, rounded corners, or system UI overlays. public virtual Rect DisplayArea { get; set; } Property Value Rect Remarks Used by the layout system to determine the full available size. RequireKeyboard Requests that the soft keyboard be shown or hidden (on supported platforms). public bool RequireKeyboard { get; set; } Property Value bool SafeArea Gets or sets the \"safe\" area of the window, excluding obstructions like notches or status bars. Important UI elements should be placed within this area. public virtual Rect SafeArea { get; set; } Property Value Rect Remarks Especially relevant on mobile devices and in emulator scenarios. Title Gets or sets the window title (where supported by the platform). public string Title { get; set; } Property Value string Methods Closed() Invoked when the window is closed and cleanup should occur. public virtual void Closed() Closing() Invoked before the window closes. Returning false can cancel the closure. public virtual bool Closing() Returns bool true if the window may close; otherwise, false. CreateActualWindow() Creates the platform-specific window for this abstract window. protected virtual IWindow CreateActualWindow() Returns IWindow The platform implementation of IWindow. DeleteBackwards(ref DeleteBackwardsEventRef) Requests deletion of content preceding the caret or selection. public virtual void DeleteBackwards(ref DeleteBackwardsEventRef eventRef) Parameters eventRef DeleteBackwardsEventRef The input event representing a backspace action. InsertText(ref InsertTextEventRef) Requests insertion of one or more characters into the current input context. public virtual void InsertText(ref InsertTextEventRef eventRef) Parameters eventRef InsertTextEventRef The input event containing the text to insert. Invalidate() Requests a visual invalidation/redraw of this window. public virtual void Invalidate() OnAnimationFrame(ref FrameEventRef) Invoked once per frame to propagate animation timing information. public virtual void OnAnimationFrame(ref FrameEventRef e) Parameters e FrameEventRef OnMouseDown(ref MouseDownEventRef) Invoked when a mouse button is pressed within the window. public virtual void OnMouseDown(ref MouseDownEventRef e) Parameters e MouseDownEventRef OnMouseMove(ref MouseMoveEventRef) Invoked when the mouse is moved within the window. public virtual void OnMouseMove(ref MouseMoveEventRef e) Parameters e MouseMoveEventRef OnMouseUp(ref MouseUpEventRef) Invoked when a mouse button is released within the window. public virtual void OnMouseUp(ref MouseUpEventRef e) Parameters e MouseUpEventRef OnScrollWheel(ref ScrollWheelEventRef) Invoked when the scroll wheel is used within the window. public virtual void OnScrollWheel(ref ScrollWheelEventRef e) Parameters e ScrollWheelEventRef OnTouch(ref TouchEventRef) Invoked when touch input occurs within the window. public virtual void OnTouch(ref TouchEventRef e) Parameters e TouchEventRef Render(ref RenderEventRef) Invoked during the render phase of the UI lifecycle. Responsible for triggering layout and visual updates. public virtual void Render(ref RenderEventRef renderEventRef) Parameters renderEventRef RenderEventRef Show() Makes the window visible and adds it to the list of open windows. public void Show() WindowHitTest(ref WindowHitTestEventRef) Invoked when the system requests a hit test for window interaction. Allows the app to indicate whether a region is draggable, resizable, etc. public virtual void WindowHitTest(ref WindowHitTestEventRef evRef) Parameters evRef WindowHitTestEventRef The hit test event containing pointer position and window bounds."
  },
  "api/Xui.Core.Abstract.html": {
    "href": "api/Xui.Core.Abstract.html",
    "title": "Namespace Xui.Core.Abstract | XUI APPS",
    "summary": "Namespace Xui.Core.Abstract Namespaces Xui.Core.Abstract.Events Classes Application Represents an abstract base class for Xui applications. This class is paired at runtime with a platform-specific counterpart, which delegates to actual system APIs on macOS, Windows, Android, etc. Users should subclass Application, override the Start() method, and call Run() to launch the application. HotReload Internal integration point for .NET's MetadataUpdateHandler, enabling partial support for Hot Reload during development. This is not a stable API and should not be used by application developers. Window Represents an abstract cross-platform application window in Xui. Handles input, rendering, layout, and software keyboard integration. Interfaces IWindow Defines the abstract interface for a platform window in Xui. This surface hosts rendering, input handling, and layout updates. IWindow.IDesktopStyle Provides optional desktop-specific window styling hints for platforms that support multiple top-level windows (e.g., Windows, macOS, Linux). IWindow.ISoftKeyboard Represents a handler for software keyboard input."
  },
  "api/Xui.Core.Actual.IDispatcher.html": {
    "href": "api/Xui.Core.Actual.IDispatcher.html",
    "title": "Interface IDispatcher | XUI APPS",
    "summary": "Interface IDispatcher Namespace Xui.Core.Actual Assembly Core.dll Represents a platform-specific dispatcher for marshaling callbacks onto the main UI thread. Used by the Xui runtime to ensure thread-safe execution of UI logic. Each platform must provide an implementation that posts callbacks to the appropriate runloop or UI thread. public interface IDispatcher Methods Post(Action) Posts the specified callback to be executed on the dispatcher's thread (typically the UI thread). Use this method when calling from a background thread and needing to safely transition to the main thread for UI updates or layout work. void Post(Action callback) Parameters callback Action The action to execute on the dispatcher's thread."
  },
  "api/Xui.Core.Actual.IRunLoop.html": {
    "href": "api/Xui.Core.Actual.IRunLoop.html",
    "title": "Interface IRunLoop | XUI APPS",
    "summary": "Interface IRunLoop Namespace Xui.Core.Actual Assembly Core.dll Represents a platform-specific run loop responsible for driving the application's lifecycle. Each platform must provide an implementation that enters the appropriate system event loop and continues running until the application exits. The Xui runtime uses this interface to abstract over platform differences in event dispatch and app execution. public interface IRunLoop Methods Run() Starts the main run loop for the application. This method may block until the application terminates or exits naturally. On platforms with built-in UI event loops (e.g., iOS, Android), this method may return immediately after bootstrapping the application delegate. int Run() Returns int The application’s exit code."
  },
  "api/Xui.Core.Actual.IRuntime.html": {
    "href": "api/Xui.Core.Actual.IRuntime.html",
    "title": "Interface IRuntime | XUI APPS",
    "summary": "Interface IRuntime Namespace Xui.Core.Actual Assembly Core.dll Provides a platform-specific implementation of the Xui runtime, responsible for creating and connecting abstract application components to their actual counterparts. This interface acts as a bridge between the platform-independent core and the underlying OS-specific APIs (e.g., Win32, Cocoa, UIKit), enabling rendering, windowing, and event dispatch. public interface IRuntime Properties DrawingContext Gets the global drawing context for the current platform. This typically wraps a native graphics context such as Direct2D (Windows) or CGContext (macOS), and serves as the entry point for rendering operations. IContext DrawingContext { get; } Property Value IContext MainDispatcher Gets the main thread dispatcher for scheduling UI work. Used to marshal execution onto the main thread for layout, input, and rendering. IDispatcher MainDispatcher { get; } Property Value IDispatcher Methods CreateRunloop(Application) Creates a platform-specific run loop associated with the given abstract application. The returned run loop is responsible for managing the application's execution lifecycle. IRunLoop CreateRunloop(Application applicationAbstract) Parameters applicationAbstract Application The abstract application instance defined by user code. Returns IRunLoop A platform-specific run loop instance. CreateWindow(IWindow) Creates a platform-specific window that is bound to the given abstract window definition. IWindow CreateWindow(IWindow windowAbstract) Parameters windowAbstract IWindow The abstract window definition provided by user code. Returns IWindow A concrete window implementation for the current platform."
  },
  "api/Xui.Core.Actual.IWindow.html": {
    "href": "api/Xui.Core.Actual.IWindow.html",
    "title": "Interface IWindow | XUI APPS",
    "summary": "Interface IWindow Namespace Xui.Core.Actual Assembly Core.dll Represents a platform-specific window implementation used by the Xui runtime. Each platform (e.g., Windows, macOS, iOS) must provide an implementation of this interface to manage window lifecycle, rendering, and input. This interface is typically paired with an abstract window in the Xui framework, and is not used directly by application developers. public interface IWindow Properties RequireKeyboard Gets or sets whether the window currently requires keyboard input focus. Platforms may use this to show or hide on-screen keyboards. bool RequireKeyboard { get; set; } Property Value bool Title Gets or sets the window title, where supported by the platform (e.g., desktop). string Title { get; set; } Property Value string Methods Invalidate() Requests a redraw of the window surface. The platform should trigger a paint or render callback as soon as possible. void Invalidate() Show() Displays the window to the user. This may include making it visible, entering the main loop, or attaching it to the application’s view hierarchy, depending on the platform. void Show()"
  },
  "api/Xui.Core.Actual.Runtime.RuntimeNotAvailable.html": {
    "href": "api/Xui.Core.Actual.Runtime.RuntimeNotAvailable.html",
    "title": "Class Runtime.RuntimeNotAvailable | XUI APPS",
    "summary": "Class Runtime.RuntimeNotAvailable Namespace Xui.Core.Actual Assembly Core.dll Exception thrown when Current is accessed before it has been initialized. public class Runtime.RuntimeNotAvailable : Exception, ISerializable Inheritance object Exception Runtime.RuntimeNotAvailable Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RuntimeNotAvailable() Initializes a new instance of the Runtime.RuntimeNotAvailable exception with a helpful diagnostic message. public RuntimeNotAvailable()"
  },
  "api/Xui.Core.Actual.Runtime.html": {
    "href": "api/Xui.Core.Actual.Runtime.html",
    "title": "Class Runtime | XUI APPS",
    "summary": "Class Runtime Namespace Xui.Core.Actual Assembly Core.dll Provides global access to the platform-specific runtime environment for the current Xui application. The platform must assign Current at startup with a concrete IRuntime implementation, which wires up platform-specific services like rendering, window creation, and dispatching. public static class Runtime Inheritance object Runtime Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Current Gets or sets the current platform runtime instance. This must be initialized at application startup by platform bootstrap code. public static IRuntime Current { get; set; } Property Value IRuntime Exceptions Runtime.RuntimeNotAvailable Thrown if accessed before the runtime has been initialized. DrawingContext Gets the global drawing context provided by the current platform runtime, if available. public static IContext? DrawingContext { get; } Property Value IContext MainDispatcher Gets the main dispatcher for scheduling UI work on the platform's main thread, if available. public static IDispatcher? MainDispatcher { get; } Property Value IDispatcher"
  },
  "api/Xui.Core.Actual.html": {
    "href": "api/Xui.Core.Actual.html",
    "title": "Namespace Xui.Core.Actual | XUI APPS",
    "summary": "Namespace Xui.Core.Actual Classes Runtime Provides global access to the platform-specific runtime environment for the current Xui application. The platform must assign Current at startup with a concrete IRuntime implementation, which wires up platform-specific services like rendering, window creation, and dispatching. Runtime.RuntimeNotAvailable Exception thrown when Current is accessed before it has been initialized. Interfaces IDispatcher Represents a platform-specific dispatcher for marshaling callbacks onto the main UI thread. Used by the Xui runtime to ensure thread-safe execution of UI logic. Each platform must provide an implementation that posts callbacks to the appropriate runloop or UI thread. IRunLoop Represents a platform-specific run loop responsible for driving the application's lifecycle. Each platform must provide an implementation that enters the appropriate system event loop and continues running until the application exits. The Xui runtime uses this interface to abstract over platform differences in event dispatch and app execution. IRuntime Provides a platform-specific implementation of the Xui runtime, responsible for creating and connecting abstract application components to their actual counterparts. This interface acts as a bridge between the platform-independent core and the underlying OS-specific APIs (e.g., Win32, Cocoa, UIKit), enabling rendering, windowing, and event dispatch. IWindow Represents a platform-specific window implementation used by the Xui runtime. Each platform (e.g., Windows, macOS, iOS) must provide an implementation of this interface to manage window lifecycle, rendering, and input. This interface is typically paired with an abstract window in the Xui framework, and is not used directly by application developers."
  },
  "api/Xui.Core.Animation.ConstantDecelerationCurve.html": {
    "href": "api/Xui.Core.Animation.ConstantDecelerationCurve.html",
    "title": "Struct ConstantDecelerationCurve | XUI APPS",
    "summary": "Struct ConstantDecelerationCurve Namespace Xui.Core.Animation Assembly Core.dll Represents a 1D motion curve with constant deceleration (e.g., for scroll or fling). Starts at a given position and velocity, then decelerates linearly to a stop. public readonly struct ConstantDecelerationCurve Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This model is commonly used in UI frameworks to simulate natural-feeling scroll behavior. The acceleration is constant and opposite to the direction of motion, resulting in a predictable, smooth slowdown. Constructors ConstantDecelerationCurve(TimeSpan, NFloat, NFloat, NFloat) Constructs a motion curve with constant deceleration. public ConstantDecelerationCurve(TimeSpan startTime, NFloat position, NFloat velocity, NFloat accelerationMagnitude) Parameters startTime TimeSpan The time when motion begins. position NFloat The initial position at startTime. velocity NFloat The initial velocity in pixels per second. accelerationMagnitude NFloat The magnitude of deceleration (must be positive). Exceptions ArgumentOutOfRangeException Thrown if accelerationMagnitude is not positive. Fields A The constant acceleration applied during motion, typically negative. public readonly NFloat A Field Value NFloat EndTime The time when the motion stops (velocity reaches zero). public readonly TimeSpan EndTime Field Value TimeSpan P0 The initial position at StartTime, in pixels. public readonly NFloat P0 Field Value NFloat StartTime The time when the motion begins. public readonly TimeSpan StartTime Field Value TimeSpan V0 The initial velocity at StartTime, in pixels per second. public readonly NFloat V0 Field Value NFloat Properties DurationSeconds The total duration of the motion in seconds. public NFloat DurationSeconds { get; } Property Value NFloat this[TimeSpan] Evaluates the position at the specified time. public NFloat this[TimeSpan time] { get; } Parameters time TimeSpan The absolute time at which to evaluate the position. Property Value NFloat The position in pixels. Methods VelocityAt(TimeSpan) Evaluates the velocity at the specified time. public NFloat VelocityAt(TimeSpan time) Parameters time TimeSpan The absolute time at which to evaluate the velocity. Returns NFloat The velocity in pixels per second."
  },
  "api/Xui.Core.Animation.CubicMotionCurve.html": {
    "href": "api/Xui.Core.Animation.CubicMotionCurve.html",
    "title": "Struct CubicMotionCurve | XUI APPS",
    "summary": "Struct CubicMotionCurve Namespace Xui.Core.Animation Assembly Core.dll Represents a 1D cubic motion curve over time, interpolating both position and velocity. Time is expressed using TimeSpan, and calculations are performed in seconds. public readonly struct CubicMotionCurve Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This curve is defined by a cubic polynomial: f(t) = A·t³ + B·t² + C·t + D, where t is time in seconds since the global epoch. It supports generation from boundary conditions (position and velocity at both ends), as well as curve continuation with seamless velocity transitions. Constructors CubicMotionCurve(TimeSpan, TimeSpan, NFloat, NFloat, NFloat, NFloat) Initializes a new cubic motion curve with the given polynomial coefficients and time range. public CubicMotionCurve(TimeSpan startTime, TimeSpan endTime, NFloat a, NFloat b, NFloat c, NFloat d) Parameters startTime TimeSpan endTime TimeSpan a NFloat b NFloat c NFloat d NFloat Fields A The cubic coefficient (multiplied by t³). public readonly NFloat A Field Value NFloat B The quadratic coefficient (multiplied by t²). public readonly NFloat B Field Value NFloat C The linear coefficient (multiplied by t). public readonly NFloat C Field Value NFloat D The constant offset term. public readonly NFloat D Field Value NFloat EndTime The time at which the motion curve ends. public readonly TimeSpan EndTime Field Value TimeSpan StartTime The time at which the motion curve starts. public readonly TimeSpan StartTime Field Value TimeSpan Properties DurationSeconds The duration of the motion curve, in seconds. public NFloat DurationSeconds { get; } Property Value NFloat FinalPosition The final position at EndTime. public NFloat FinalPosition { get; } Property Value NFloat this[TimeSpan] Evaluates the position at the specified time. public NFloat this[TimeSpan time] { get; } Parameters time TimeSpan An absolute time value. Property Value NFloat The position at the given time. Methods ContinueWithBoundaryConditions(TimeSpan, TimeSpan, NFloat, NFloat) Continues the current curve by constructing a new cubic motion curve that begins where this one leaves off, matching position and velocity, and interpolating to a new position and velocity over the given time range. public CubicMotionCurve ContinueWithBoundaryConditions(TimeSpan startTime, TimeSpan endTime, NFloat endPosition, NFloat endVelocity) Parameters startTime TimeSpan endTime TimeSpan endPosition NFloat endVelocity NFloat Returns CubicMotionCurve FromBoundaryConditions(TimeSpan, NFloat, NFloat, TimeSpan, NFloat, NFloat) Constructs a cubic motion curve that interpolates position and velocity between two points in time using Hermite interpolation. public static CubicMotionCurve FromBoundaryConditions(TimeSpan startTime, NFloat startPosition, NFloat startVelocity, TimeSpan endTime, NFloat endPosition, NFloat endVelocity) Parameters startTime TimeSpan The curve's start time. startPosition NFloat The position at startTime. startVelocity NFloat The velocity at startTime. endTime TimeSpan The curve's end time. endPosition NFloat The position at endTime. endVelocity NFloat The velocity at endTime. Returns CubicMotionCurve A cubic motion curve satisfying the specified boundary conditions. VelocityAt(TimeSpan) Evaluates the velocity at the specified time. public NFloat VelocityAt(TimeSpan time) Parameters time TimeSpan An absolute time value. Returns NFloat The velocity at the given time."
  },
  "api/Xui.Core.Animation.Easing.CubicBezier.html": {
    "href": "api/Xui.Core.Animation.Easing.CubicBezier.html",
    "title": "Struct Easing.CubicBezier | XUI APPS",
    "summary": "Struct Easing.CubicBezier Namespace Xui.Core.Animation Assembly Core.dll Represents a CSS-style cubic Bézier easing curve constrained between (0,0) and (1,1). public readonly struct Easing.CubicBezier Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks These curves are used for timing animations and transitions. The curve always starts at (0,0) and ends at (1,1), and the control points P1 and P2 shape the acceleration and deceleration of the animation. Constructors CubicBezier(Point, Point) Initializes a new CSS-style cubic Bézier easing curve with the given control points. Assumes endpoints at (0,0) and (1,1). public CubicBezier(Point p1, Point p2) Parameters p1 Point p2 Point Fields P1 The first control point (typically near the origin). public readonly Point P1 Field Value Point P2 The second control point (typically near the destination). public readonly Point P2 Field Value Point Properties Ease Equivalent to CSS ease: cubic-bezier(0.25, 0.1, 0.25, 1.0) public static Easing.CubicBezier Ease { get; } Property Value Easing.CubicBezier EaseIn Equivalent to CSS ease-in: cubic-bezier(0.42, 0, 1.0, 1.0) public static Easing.CubicBezier EaseIn { get; } Property Value Easing.CubicBezier EaseInOut Equivalent to CSS ease-in-out: cubic-bezier(0.42, 0, 0.58, 1.0) public static Easing.CubicBezier EaseInOut { get; } Property Value Easing.CubicBezier EaseOut Equivalent to CSS ease-out: cubic-bezier(0, 0, 0.58, 1.0) public static Easing.CubicBezier EaseOut { get; } Property Value Easing.CubicBezier this[NFloat] Indexer alias for Evaluate(NFloat). public NFloat this[NFloat x] { get; } Parameters x NFloat Property Value NFloat Methods ClosestT(Point) Finds the parameter t ∈ [0, 1] where the curve is closest to the given target point. Uses 16-step approximation. public NFloat ClosestT(Point target) Parameters target Point Returns NFloat Drag(Point, Vector) Returns a new cubic Bézier easing curve with a deformation applied near the closest point to origin, shifted by delta. public Easing.CubicBezier Drag(Point origin, Vector delta) Parameters origin Point delta Vector Returns Easing.CubicBezier DragAt(NFloat, Vector) Returns a new cubic Bézier easing curve with a deformation applied at the given parameter t by delta. public Easing.CubicBezier DragAt(NFloat t, Vector delta) Parameters t NFloat delta Vector Returns Easing.CubicBezier Evaluate(NFloat) Approximates the Y output value for a given input X ∈ [0,1] using a 16-step lookup table. public NFloat Evaluate(NFloat x) Parameters x NFloat Returns NFloat Evaluate(NFloat, NFloat) Approximates the Y output value for a given input X ∈ [0,1] using binary search to the given precision. public NFloat Evaluate(NFloat x, NFloat precision) Parameters x NFloat precision NFloat Returns NFloat Lerp(NFloat) Returns the interpolated point on the Bézier curve at a given t ∈ [0, 1]. public Point Lerp(NFloat t) Parameters t NFloat Returns Point Operators implicit operator CubicBezier(CubicBezier) Converts a full CubicBezier into a CSS-style easing curve. The curve must begin at (0,0) and end at (1,1). public static implicit operator Easing.CubicBezier(CubicBezier bezier) Parameters bezier CubicBezier Returns Easing.CubicBezier"
  },
  "api/Xui.Core.Animation.Easing.PolynomialEasing.html": {
    "href": "api/Xui.Core.Animation.Easing.PolynomialEasing.html",
    "title": "Struct Easing.PolynomialEasing | XUI APPS",
    "summary": "Struct Easing.PolynomialEasing Namespace Xui.Core.Animation Assembly Core.dll Represents a 3rd- or 4th-degree polynomial easing function for animation timing curves. public readonly struct Easing.PolynomialEasing Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This type can be used to approximate Bézier-based easing curves (like Easing.CubicBezier) using polynomial coefficients, which are faster to evaluate and easier to store or serialize. Constructors PolynomialEasing(NFloat, NFloat, NFloat, NFloat) Constructs a 3rd-degree polynomial: y = B·x³ + C·x² + D·x + E public PolynomialEasing(NFloat b, NFloat c, NFloat d, NFloat e) Parameters b NFloat c NFloat d NFloat e NFloat PolynomialEasing(NFloat, NFloat, NFloat, NFloat, NFloat) Constructs a 4th-degree polynomial: y = A·x⁴ + B·x³ + C·x² + D·x + E public PolynomialEasing(NFloat a, NFloat b, NFloat c, NFloat d, NFloat e) Parameters a NFloat b NFloat c NFloat d NFloat e NFloat PolynomialEasing(CubicBezier, int) Approximates a Easing.CubicBezier easing curve using a cubic polynomial. The result fits y = B·x³ + C·x² + D·x + E over the domain x ∈ [0, 1]. public PolynomialEasing(Easing.CubicBezier bezier, int samples = 16) Parameters bezier Easing.CubicBezier The Bézier curve to approximate. samples int Number of sample points to use in least-squares fitting. Default is 16. Fields A The coefficient for x⁴ (A = 0 for cubic curves). public readonly NFloat A Field Value NFloat B The coefficient for x³. public readonly NFloat B Field Value NFloat C The coefficient for x². public readonly NFloat C Field Value NFloat D The coefficient for x¹. public readonly NFloat D Field Value NFloat E The constant term. public readonly NFloat E Field Value NFloat Properties this[NFloat] Evaluates the polynomial at a given value of x ∈ [0, 1]. public NFloat this[NFloat x] { get; } Parameters x NFloat The input value (typically time). Property Value NFloat The eased value at x."
  },
  "api/Xui.Core.Animation.Easing.html": {
    "href": "api/Xui.Core.Animation.Easing.html",
    "title": "Class Easing | XUI APPS",
    "summary": "Class Easing Namespace Xui.Core.Animation Assembly Core.dll Provides a collection of easing functions and smoothing utilities used in animations. All easing methods are normalized to take a parameter t in the range [0, 1]. public static class Easing Inheritance object Easing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EaseInBack(NFloat) Eases in with a \"backwards\" overshoot effect before settling forward. public static NFloat EaseInBack(NFloat t) Parameters t NFloat Returns NFloat EaseInBounce(NFloat) Reverses EaseOutBounce to ease in with bounce. public static NFloat EaseInBounce(NFloat t) Parameters t NFloat Returns NFloat EaseInCubic(NFloat) Accelerates slowly with a cubic curve. public static NFloat EaseInCubic(NFloat t) Parameters t NFloat Returns NFloat EaseInElastic(NFloat) Creates an elastic \"bounce-in\" effect at the beginning of the transition. public static NFloat EaseInElastic(NFloat t) Parameters t NFloat Returns NFloat EaseInOutBack(NFloat) Eases in and out with a \"backwards\" overshoot at both ends. public static NFloat EaseInOutBack(NFloat t) Parameters t NFloat Returns NFloat EaseInOutBounce(NFloat) Eases in and out with a bounce at both ends. public static NFloat EaseInOutBounce(NFloat t) Parameters t NFloat Returns NFloat EaseInOutCubic(NFloat) Smoothly accelerates and decelerates with a cubic curve. public static NFloat EaseInOutCubic(NFloat t) Parameters t NFloat Returns NFloat EaseInOutElastic(NFloat) Combines EaseInElastic and EaseOutElastic for a spring-like bounce effect at both ends. public static NFloat EaseInOutElastic(NFloat t) Parameters t NFloat Returns NFloat EaseInOutQuad(NFloat) Accelerates and decelerates using a quadratic curve. public static NFloat EaseInOutQuad(NFloat t) Parameters t NFloat Returns NFloat EaseInOutQuart(NFloat) Strong acceleration and deceleration using a quartic curve. public static NFloat EaseInOutQuart(NFloat t) Parameters t NFloat Returns NFloat EaseInOutSine(NFloat) Eases in and out with a sine curve. Smoothest at beginning and end. public static NFloat EaseInOutSine(NFloat t) Parameters t NFloat Returns NFloat EaseInQuad(NFloat) Accelerates slowly from 0 to 1 with a quadratic curve. public static NFloat EaseInQuad(NFloat t) Parameters t NFloat Returns NFloat EaseInQuart(NFloat) Stronger acceleration from 0 using a quartic curve. public static NFloat EaseInQuart(NFloat t) Parameters t NFloat Returns NFloat EaseOutBack(NFloat) Eases out with a slight overshoot after reaching the target. public static NFloat EaseOutBack(NFloat t) Parameters t NFloat Returns NFloat EaseOutBounce(NFloat) Creates a bounce effect as if hitting the ground and bouncing back. public static NFloat EaseOutBounce(NFloat t) Parameters t NFloat Returns NFloat EaseOutCubic(NFloat) Decelerates slowly with a cubic curve. public static NFloat EaseOutCubic(NFloat t) Parameters t NFloat Returns NFloat EaseOutElastic(NFloat) Creates an elastic \"bounce-out\" effect at the end of the transition. public static NFloat EaseOutElastic(NFloat t) Parameters t NFloat Returns NFloat EaseOutQuad(NFloat) Decelerates smoothly from 1 to 0 with a quadratic curve. public static NFloat EaseOutQuad(NFloat t) Parameters t NFloat Returns NFloat EaseOutQuart(NFloat) Stronger deceleration to 1 using a quartic curve. public static NFloat EaseOutQuart(NFloat t) Parameters t NFloat Returns NFloat Normalize(NFloat, NFloat, NFloat) Normalizes a value between min and max into a [0,1] range. Returns 0 if max ≤ min. public static NFloat Normalize(NFloat value, NFloat min, NFloat max) Parameters value NFloat min NFloat max NFloat Returns NFloat SmoothDamp(NFloat, NFloat, ref NFloat, NFloat, NFloat, NFloat) Smoothly interpolates between two values using a critically damped spring-like function. public static NFloat SmoothDamp(NFloat from, NFloat to, ref NFloat velocity, NFloat smoothTime, NFloat maxSpeed, NFloat deltaTime) Parameters from NFloat The starting value. to NFloat The target value. velocity NFloat Reference to current velocity (will be modified). smoothTime NFloat Time it takes to reach the target value. maxSpeed NFloat Maximum speed during interpolation. deltaTime NFloat Elapsed time since the last update. Returns NFloat SmootherStep(NFloat) Applies a smoothstep-like easing function that produces smooth transitions with zero first and second derivatives at boundaries. public static NFloat SmootherStep(NFloat t) Parameters t NFloat Returns NFloat"
  },
  "api/Xui.Core.Animation.ExponentialDecayCurve.html": {
    "href": "api/Xui.Core.Animation.ExponentialDecayCurve.html",
    "title": "Struct ExponentialDecayCurve | XUI APPS",
    "summary": "Struct ExponentialDecayCurve Namespace Xui.Core.Animation Assembly Core.dll Represents a motion curve where velocity decays exponentially over time. Commonly used to simulate fling or momentum-based motion with smooth slowdown. public readonly struct ExponentialDecayCurve Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ExponentialDecayCurve(TimeSpan, NFloat, NFloat, NFloat, double) Initializes an exponential decay motion curve. public ExponentialDecayCurve(TimeSpan startTime, NFloat startPosition, NFloat initialVelocity, NFloat decayPerSecond, double velocityThreshold = 0.5) Parameters startTime TimeSpan The time when motion begins. startPosition NFloat The initial position. initialVelocity NFloat The initial velocity (can be negative). decayPerSecond NFloat The decay multiplier per second. A value less than 1, closer to 0 = faster decay. Recommended value is Normal. velocityThreshold double The velocity below which motion is considered stopped (defaults to 0.5). Fields DecayPerSecond The decay factor per second. Lower values result in faster deceleration. public readonly NFloat DecayPerSecond Field Value NFloat EndTime The time at which the motion ends, determined by when velocity falls below a defined threshold. public readonly TimeSpan EndTime Field Value TimeSpan Fast A faster decay factor (~0.99 per millisecond). Use for snappier motion. public static readonly NFloat Fast Field Value NFloat InitialVelocity The initial velocity at the start of the curve. public readonly NFloat InitialVelocity Field Value NFloat Normal A typical decay factor (~0.998 per millisecond). Use for normal fling decay. public static readonly NFloat Normal Field Value NFloat StartPosition The starting position of the motion. public readonly NFloat StartPosition Field Value NFloat StartTime The time at which the motion begins. public readonly TimeSpan StartTime Field Value TimeSpan Properties FinalPosition Gets the final position of the motion at EndTime. public NFloat FinalPosition { get; } Property Value NFloat this[TimeSpan] Evaluates the position of the motion at a given time. public NFloat this[TimeSpan time] { get; } Parameters time TimeSpan The time to evaluate. Property Value NFloat The interpolated position at the specified time. Methods VelocityAt(TimeSpan) Evaluates the velocity of the motion at a given time. public NFloat VelocityAt(TimeSpan time) Parameters time TimeSpan The time to evaluate. Returns NFloat The current velocity at the specified time."
  },
  "api/Xui.Core.Animation.QuadraticMotionCurve.html": {
    "href": "api/Xui.Core.Animation.QuadraticMotionCurve.html",
    "title": "Struct QuadraticMotionCurve | XUI APPS",
    "summary": "Struct QuadraticMotionCurve Namespace Xui.Core.Animation Assembly Core.dll Represents a 1D motion curve under constant acceleration, defined as a quadratic function of time. This curve is useful for modeling motion that decelerates smoothly to a stop, such as fling or scroll-stop animations. public readonly struct QuadraticMotionCurve Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors QuadraticMotionCurve(TimeSpan, NFloat, NFloat, NFloat) Constructs a curve from initial position, velocity, and acceleration magnitude. The acceleration is applied in the opposite direction of velocity to decelerate to zero. public QuadraticMotionCurve(TimeSpan startTime, NFloat startPosition, NFloat startVelocity, NFloat accelerationMagnitude) Parameters startTime TimeSpan The time when motion starts. startPosition NFloat Initial position. startVelocity NFloat Initial velocity (positive or negative). accelerationMagnitude NFloat Positive scalar magnitude of deceleration. QuadraticMotionCurve(TimeSpan, TimeSpan, NFloat, NFloat, NFloat) Initializes the curve with explicit polynomial coefficients and time range. public QuadraticMotionCurve(TimeSpan startTime, TimeSpan endTime, NFloat a, NFloat b, NFloat c) Parameters startTime TimeSpan The time when motion starts. endTime TimeSpan The time when motion ends. a NFloat The quadratic coefficient. b NFloat The linear coefficient. c NFloat The constant offset. Fields A The quadratic coefficient (0.5 * acceleration). public readonly NFloat A Field Value NFloat B The linear coefficient (initial velocity minus adjustment). public readonly NFloat B Field Value NFloat C The constant coefficient (initial position minus offset). public readonly NFloat C Field Value NFloat EndTime The time at which the motion ends (i.e., when velocity reaches zero). public readonly TimeSpan EndTime Field Value TimeSpan StartTime The time at which the motion starts. public readonly TimeSpan StartTime Field Value TimeSpan Properties FinalPosition Gets the final position of the motion at EndTime. public NFloat FinalPosition { get; } Property Value NFloat this[TimeSpan] Evaluates the position of the motion at the specified time. public NFloat this[TimeSpan time] { get; } Parameters time TimeSpan The time at which to evaluate the position. Property Value NFloat Methods VelocityAt(TimeSpan) Evaluates the instantaneous velocity at the specified time. public NFloat VelocityAt(TimeSpan time) Parameters time TimeSpan The time at which to evaluate the velocity. Returns NFloat The velocity in units per second."
  },
  "api/Xui.Core.Animation.html": {
    "href": "api/Xui.Core.Animation.html",
    "title": "Namespace Xui.Core.Animation | XUI APPS",
    "summary": "Namespace Xui.Core.Animation Classes Easing Provides a collection of easing functions and smoothing utilities used in animations. All easing methods are normalized to take a parameter t in the range [0, 1]. Structs ConstantDecelerationCurve Represents a 1D motion curve with constant deceleration (e.g., for scroll or fling). Starts at a given position and velocity, then decelerates linearly to a stop. CubicMotionCurve Represents a 1D cubic motion curve over time, interpolating both position and velocity. Time is expressed using TimeSpan, and calculations are performed in seconds. Easing.CubicBezier Represents a CSS-style cubic Bézier easing curve constrained between (0,0) and (1,1). Easing.PolynomialEasing Represents a 3rd- or 4th-degree polynomial easing function for animation timing curves. ExponentialDecayCurve Represents a motion curve where velocity decays exponentially over time. Commonly used to simulate fling or momentum-based motion with smooth slowdown. QuadraticMotionCurve Represents a 1D motion curve under constant acceleration, defined as a quadratic function of time. This curve is useful for modeling motion that decelerates smoothly to a stop, such as fling or scroll-stop animations."
  },
  "api/Xui.Core.Canvas.Color.html": {
    "href": "api/Xui.Core.Canvas.Color.html",
    "title": "Struct Color | XUI APPS",
    "summary": "Struct Color Namespace Xui.Core.Canvas Assembly Core.dll Represents a color using red, green, blue, and alpha components, all normalized to the range [0, 1]. public struct Color Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Color(NFloat, NFloat, NFloat, NFloat) Initializes a new Color with the specified red, green, blue, and alpha components. public Color(NFloat red, NFloat green, NFloat blue, NFloat alpha) Parameters red NFloat Red component, normalized [0, 1] green NFloat Green component, normalized [0, 1] blue NFloat Blue component, normalized [0, 1] alpha NFloat Alpha component, normalized [0, 1] Color(uint) Initializes a new Color from a packed 32-bit RGBA value. The value format is 0xRRGGBBAA, where each component is 8 bits. public Color(uint rgba) Parameters rgba uint Packed RGBA value in 0xRRGGBBAA format. Fields Alpha Alpha (opacity) component of the color, in the range [0, 1]. public NFloat Alpha Field Value NFloat Blue Blue component of the color, in the range [0, 1]. public NFloat Blue Field Value NFloat Green Green component of the color, in the range [0, 1]. public NFloat Green Field Value NFloat Red Red component of the color, in the range [0, 1]. public NFloat Red Field Value NFloat Operators implicit operator Color(uint) Implicitly converts a 32-bit RGBA value (0xRRGGBBAA) to a Color. public static implicit operator Color(uint rgbaHex) Parameters rgbaHex uint Packed RGBA hex value. Returns Color"
  },
  "api/Xui.Core.Canvas.Colors.html": {
    "href": "api/Xui.Core.Canvas.Colors.html",
    "title": "Class Colors | XUI APPS",
    "summary": "Class Colors Namespace Xui.Core.Canvas Assembly Core.dll Provides web standard named color constants in 32-bit RGBA format (0xRRGGBBAA). These match the named colors from the CSS color specification: https://developer.mozilla.org/en-US/docs/Web/CSS/named-color public static class Colors Inheritance object Colors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AliceBlue public const uint AliceBlue = 4042850303 Field Value uint AntiqueWhite public const uint AntiqueWhite = 4209760255 Field Value uint Aqua public const uint Aqua = 16777215 Field Value uint Aquamarine public const uint Aquamarine = 2147472639 Field Value uint Azure public const uint Azure = 4043309055 Field Value uint Beige public const uint Beige = 4126530815 Field Value uint Bisque public const uint Bisque = 4293182719 Field Value uint Black public const uint Black = 255 Field Value uint BlanchedAlmond public const uint BlanchedAlmond = 4293643775 Field Value uint Blue public const uint Blue = 65535 Field Value uint BlueViolet public const uint BlueViolet = 2318131967 Field Value uint Brown public const uint Brown = 2771004159 Field Value uint BurlyWood public const uint BurlyWood = 3736635391 Field Value uint CadetBlue public const uint CadetBlue = 1604231423 Field Value uint ChartReuse public const uint ChartReuse = 2147418367 Field Value uint Chocolate public const uint Chocolate = 3530104575 Field Value uint Coral public const uint Coral = 4286533887 Field Value uint CornSilk public const uint CornSilk = 4294499583 Field Value uint CornflowerBlue public const uint CornflowerBlue = 1687547391 Field Value uint Crimson public const uint Crimson = 3692313855 Field Value uint Cyan public const uint Cyan = 16777215 Field Value uint DarkBlue public const uint DarkBlue = 35839 Field Value uint DarkCyan public const uint DarkCyan = 9145343 Field Value uint DarkGoldenRod public const uint DarkGoldenRod = 3095792639 Field Value uint DarkGray public const uint DarkGray = 2846468607 Field Value uint DarkGreen public const uint DarkGreen = 6553855 Field Value uint DarkGrey public const uint DarkGrey = 2846468607 Field Value uint DarkKhaki public const uint DarkKhaki = 3182914559 Field Value uint DarkMagenta public const uint DarkMagenta = 2332068863 Field Value uint DarkOliveGreen public const uint DarkOliveGreen = 1433087999 Field Value uint DarkOrange public const uint DarkOrange = 4287365375 Field Value uint DarkOrchid public const uint DarkOrchid = 2570243327 Field Value uint DarkRed public const uint DarkRed = 2332033279 Field Value uint DarkSalmon public const uint DarkSalmon = 3918953215 Field Value uint DarkSeaGreen public const uint DarkSeaGreen = 2411499519 Field Value uint DarkSlateBlue public const uint DarkSlateBlue = 1211993087 Field Value uint DarkSlateGray public const uint DarkSlateGray = 793726975 Field Value uint DarkSlateGrey public const uint DarkSlateGrey = 793726975 Field Value uint DarkTurquoise public const uint DarkTurquoise = 13554175 Field Value uint DarkViolet public const uint DarkViolet = 2483082239 Field Value uint DeepPink public const uint DeepPink = 4279538687 Field Value uint DeepSkyBlue public const uint DeepSkyBlue = 12582911 Field Value uint DimGray public const uint DimGray = 1768516095 Field Value uint DimGrey public const uint DimGrey = 1768516095 Field Value uint DodgerBlue public const uint DodgerBlue = 512819199 Field Value uint FireBrick public const uint FireBrick = 2988581631 Field Value uint FloralWhite public const uint FloralWhite = 4294635775 Field Value uint ForestGreen public const uint ForestGreen = 579543807 Field Value uint Fuchsia public const uint Fuchsia = 4278255615 Field Value uint Gainsboro public const uint Gainsboro = 3705462015 Field Value uint GhostWhite public const uint GhostWhite = 4177068031 Field Value uint Gold public const uint Gold = 4292280575 Field Value uint GoldenRod public const uint GoldenRod = 3668254975 Field Value uint Gray public const uint Gray = 2155905279 Field Value uint Green public const uint Green = 8388863 Field Value uint GreenYellow public const uint GreenYellow = 2919182335 Field Value uint Grey public const uint Grey = 2155905279 Field Value uint Honeydew public const uint Honeydew = 4043305215 Field Value uint HotPink public const uint HotPink = 4285117695 Field Value uint IndianRed public const uint IndianRed = 3445382399 Field Value uint Indigo public const uint Indigo = 1258324735 Field Value uint Ivory public const uint Ivory = 4294963455 Field Value uint Khaki public const uint Khaki = 4041641215 Field Value uint Lavender public const uint Lavender = 3873897215 Field Value uint LavenderBlush public const uint LavenderBlush = 4293981695 Field Value uint LawnGreen public const uint LawnGreen = 2096890111 Field Value uint LemonChiffon public const uint LemonChiffon = 4294626815 Field Value uint LightBlue public const uint LightBlue = 2916673279 Field Value uint LightCoral public const uint LightCoral = 4034953471 Field Value uint LightCyan public const uint LightCyan = 3774873599 Field Value uint LightGoldenRodYellow public const uint LightGoldenRodYellow = 4210742015 Field Value uint LightGray public const uint LightGray = 3553874943 Field Value uint LightGreen public const uint LightGreen = 2431553791 Field Value uint LightGrey public const uint LightGrey = 3553874943 Field Value uint LightPink public const uint LightPink = 4290167295 Field Value uint LightSalmon public const uint LightSalmon = 4288707327 Field Value uint LightSeaGreen public const uint LightSeaGreen = 548580095 Field Value uint LightSkyBlue public const uint LightSkyBlue = 2278488831 Field Value uint LightSlateGray public const uint LightSlateGray = 2005441023 Field Value uint LightSlateGrey public const uint LightSlateGrey = 2005441023 Field Value uint LightSteelBlue public const uint LightSteelBlue = 2965692159 Field Value uint LightYellow public const uint LightYellow = 4294959359 Field Value uint Lime public const uint Lime = 16711935 Field Value uint LimeGreen public const uint LimeGreen = 852308735 Field Value uint Linen public const uint Linen = 4210091775 Field Value uint Magenta public const uint Magenta = 4278255615 Field Value uint Maroon public const uint Maroon = 2147483903 Field Value uint MediumAquamarine public const uint MediumAquamarine = 1724754687 Field Value uint MediumBlue public const uint MediumBlue = 52735 Field Value uint MediumOrchid public const uint MediumOrchid = 3126187007 Field Value uint MediumPurple public const uint MediumPurple = 2473647103 Field Value uint MediumSeaGreen public const uint MediumSeaGreen = 1018393087 Field Value uint MediumSlateBlue public const uint MediumSlateBlue = 2070474495 Field Value uint MediumSpringGreen public const uint MediumSpringGreen = 16423679 Field Value uint MediumTurquoise public const uint MediumTurquoise = 1221709055 Field Value uint MediumVioletRed public const uint MediumVioletRed = 3340076543 Field Value uint MidnightBlue public const uint MidnightBlue = 421097727 Field Value uint MintCream public const uint MintCream = 4127193855 Field Value uint MistyRose public const uint MistyRose = 4293190143 Field Value uint Moccasin public const uint Moccasin = 4293178879 Field Value uint NavajoWhite public const uint NavajoWhite = 4292783615 Field Value uint Navy public const uint Navy = 33023 Field Value uint OldLace public const uint OldLace = 4260751103 Field Value uint Olive public const uint Olive = 2155872511 Field Value uint OliveDrab public const uint OliveDrab = 1804477439 Field Value uint Orange public const uint Orange = 4289003775 Field Value uint OrangeRed public const uint OrangeRed = 4282712319 Field Value uint Orchid public const uint Orchid = 3664828159 Field Value uint PaleGoldenRod public const uint PaleGoldenRod = 4008225535 Field Value uint PaleGreen public const uint PaleGreen = 2566625535 Field Value uint PaleTurquoise public const uint PaleTurquoise = 2951671551 Field Value uint PaleVioletRed public const uint PaleVioletRed = 3681588223 Field Value uint PapayaWhip public const uint PapayaWhip = 4293907967 Field Value uint PeachPuff public const uint PeachPuff = 4292524543 Field Value uint Peru public const uint Peru = 3448061951 Field Value uint Pink public const uint Pink = 4290825215 Field Value uint Plum public const uint Plum = 3718307327 Field Value uint PowderBlue public const uint PowderBlue = 2967529215 Field Value uint Purple public const uint Purple = 2147516671 Field Value uint RebeccaPurple public const uint RebeccaPurple = 1714657791 Field Value uint Red public const uint Red = 4278190335 Field Value uint RosyBrown public const uint RosyBrown = 3163525119 Field Value uint RoyalBlue public const uint RoyalBlue = 1097458175 Field Value uint SaddleBrown public const uint SaddleBrown = 2336560127 Field Value uint Salmon public const uint Salmon = 4202722047 Field Value uint SandyBrown public const uint SandyBrown = 4104413439 Field Value uint SeaGreen public const uint SeaGreen = 780883967 Field Value uint Seashell public const uint Seashell = 4294307583 Field Value uint Sienna public const uint Sienna = 2689740287 Field Value uint Silver public const uint Silver = 3233857791 Field Value uint SkyBlue public const uint SkyBlue = 2278484991 Field Value uint SlateBlue public const uint SlateBlue = 1784335871 Field Value uint SlateGray public const uint SlateGray = 1887473919 Field Value uint SlateGrey public const uint SlateGrey = 1887473919 Field Value uint Snow public const uint Snow = 4294638335 Field Value uint SpringGreen public const uint SpringGreen = 16744447 Field Value uint SteelBlue public const uint SteelBlue = 1182971135 Field Value uint Tan public const uint Tan = 3535047935 Field Value uint Teal public const uint Teal = 8421631 Field Value uint Thistle public const uint Thistle = 3636451583 Field Value uint Tomato public const uint Tomato = 4284696575 Field Value uint Transparent public const uint Transparent = 0 Field Value uint Turquoise public const uint Turquoise = 1088475391 Field Value uint Violet public const uint Violet = 4001558271 Field Value uint Wheat public const uint Wheat = 4125012991 Field Value uint White public const uint White = 4294967295 Field Value uint WhiteSmoke public const uint WhiteSmoke = 4126537215 Field Value uint Yellow public const uint Yellow = 4294902015 Field Value uint YellowGreen public const uint YellowGreen = 2597139199 Field Value uint"
  },
  "api/Xui.Core.Canvas.CornerRadius.html": {
    "href": "api/Xui.Core.Canvas.CornerRadius.html",
    "title": "Struct CornerRadius | XUI APPS",
    "summary": "Struct CornerRadius Namespace Xui.Core.Canvas Assembly Core.dll Represents the radius of each corner of a rectangle, allowing for uniform or non-uniform rounding. public struct CornerRadius Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors CornerRadius(NFloat) Initializes a CornerRadius with the same radius applied to all four corners. public CornerRadius(NFloat radius) Parameters radius NFloat The uniform radius for all corners. CornerRadius(NFloat, NFloat, NFloat, NFloat) Initializes a CornerRadius with individual values for each corner. public CornerRadius(NFloat topLeft, NFloat topRight, NFloat bottomRight, NFloat bottomLeft) Parameters topLeft NFloat Radius of the top-left corner. topRight NFloat Radius of the top-right corner. bottomRight NFloat Radius of the bottom-right corner. bottomLeft NFloat Radius of the bottom-left corner. Fields BottomLeft Radius of the bottom-left corner. public NFloat BottomLeft Field Value NFloat BottomRight Radius of the bottom-right corner. public NFloat BottomRight Field Value NFloat TopLeft Radius of the top-left corner. public NFloat TopLeft Field Value NFloat TopRight Radius of the top-right corner. public NFloat TopRight Field Value NFloat Properties IsUniform Returns true if all corners have the same radius value. public bool IsUniform { get; } Property Value bool Operators implicit operator CornerRadius(int) Implicitly converts a single integer radius value to a uniform CornerRadius. public static implicit operator CornerRadius(int radius) Parameters radius int The uniform corner radius. Returns CornerRadius implicit operator CornerRadius(NFloat) Implicitly converts a single radius value to a uniform CornerRadius. public static implicit operator CornerRadius(NFloat radius) Parameters radius NFloat The uniform corner radius. Returns CornerRadius implicit operator CornerRadius(Tuple<NFloat, NFloat, NFloat, NFloat>) Implicitly converts a 4-tuple of radius values to a CornerRadius. public static implicit operator CornerRadius(Tuple<NFloat, NFloat, NFloat, NFloat> radii) Parameters radii Tuple<NFloat, NFloat, NFloat, NFloat> Tuple representing (TopLeft, TopRight, BottomRight, BottomLeft). Returns CornerRadius"
  },
  "api/Xui.Core.Canvas.FillRule.html": {
    "href": "api/Xui.Core.Canvas.FillRule.html",
    "title": "Enum FillRule | XUI APPS",
    "summary": "Enum FillRule Namespace Xui.Core.Canvas Assembly Core.dll Specifies the algorithm used to determine the \"insideness\" of a point in a path, controlling how filled shapes are rendered. public enum FillRule Fields EvenOdd = 1 Uses the even-odd rule. A point is inside the path if a ray drawn from it to infinity crosses the path segments an odd number of times. NonZero = 0 Uses the non-zero winding rule. A point is inside the path if the sum of path segment windings around it is non-zero. This is the default rule."
  },
  "api/Xui.Core.Canvas.Font.html": {
    "href": "api/Xui.Core.Canvas.Font.html",
    "title": "Struct Font | XUI APPS",
    "summary": "Struct Font Namespace Xui.Core.Canvas Assembly Core.dll Describes a font used for text layout and rendering, similar to the CSS font model. public ref struct Font Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This type mirrors a simplified subset of CSS font properties as documented at: https://developer.mozilla.org/en-US/docs/Web/CSS/font Key differences: FontFamily refers to a single font name only. No fallback list or character substitution is provided. FontSize and LineHeight are specified in user-space units (e.g., pixels or points). Font weight is numeric and roughly corresponds to CSS values between 100–900. Fields FontFamily The primary font family name. No fallback fonts are supported. public ReadOnlySpan<string> FontFamily Field Value ReadOnlySpan<string> FontSize The font size in user-space units. public NFloat FontSize Field Value NFloat FontStyle The font style (normal, italic, oblique). public FontStyle FontStyle Field Value FontStyle FontWeight The numeric weight of the font. Matches common web font weights: 100 - Thin 200 - Extra Light 300 - Light 400 - Normal 500 - Medium 600 - Semi Bold 700 - Bold 800 - Extra Bold 900 - Black public NFloat FontWeight Field Value NFloat LineHeight The line height in user-space units. Controls vertical spacing between lines. public NFloat LineHeight Field Value NFloat"
  },
  "api/Xui.Core.Canvas.FontStyle.html": {
    "href": "api/Xui.Core.Canvas.FontStyle.html",
    "title": "Struct FontStyle | XUI APPS",
    "summary": "Struct FontStyle Namespace Xui.Core.Canvas Assembly Core.dll Represents a web-like font style, supporting normal, italic, and oblique variations. Global CSS styles like inherit, unset, and initial are not supported. Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/font-style public struct FontStyle Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FontStyle(bool, bool, NFloat) Initializes a new FontStyle with explicit flags for italic or oblique styling. public FontStyle(bool italic, bool oblique, NFloat obliqueAngle) Parameters italic bool Whether the font is italic. oblique bool Whether the font is oblique (slanted). obliqueAngle NFloat Angle for oblique style, in degrees. Properties IsItalic Gets a value indicating whether the font style is italic. public bool IsItalic { get; } Property Value bool IsOblique Gets a value indicating whether the font style is oblique (slanted). public bool IsOblique { get; } Property Value bool Italic Italic font style. public static FontStyle Italic { get; } Property Value FontStyle Normal Normal (upright) font style. public static FontStyle Normal { get; } Property Value FontStyle Oblique Oblique font style using the default slant angle (14°). public static FontStyle Oblique { get; } Property Value FontStyle ObliqueAngle Gets the oblique slant angle, in degrees. Only meaningful if IsOblique is true. Range is typically from -90° to 90°. public NFloat ObliqueAngle { get; } Property Value NFloat Methods CustomOblique(NFloat) Creates a custom oblique font style with a specific slant angle. public static FontStyle CustomOblique(NFloat obliqueAngle) Parameters obliqueAngle NFloat The angle of the slant, in degrees. Should be between -90 and 90. Returns FontStyle A FontStyle representing the custom oblique angle."
  },
  "api/Xui.Core.Canvas.GradientStop.html": {
    "href": "api/Xui.Core.Canvas.GradientStop.html",
    "title": "Struct GradientStop | XUI APPS",
    "summary": "Struct GradientStop Namespace Xui.Core.Canvas Assembly Core.dll Represents a single color stop in a gradient, defined by an offset and a color. Used for both linear and radial gradients. public struct GradientStop Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GradientStop(NFloat, uint) Initializes a new GradientStop with a specified offset and packed RGBA color. public GradientStop(NFloat offset, uint color) Parameters offset NFloat Position of the color stop, usually from 0 to 1. color uint Color in packed 0xRRGGBBAA format. GradientStop(NFloat, Color) Initializes a new GradientStop with a specified offset and color. public GradientStop(NFloat offset, Color color) Parameters offset NFloat Position of the color stop, usually from 0 to 1. color Color Color at the given offset. Fields Color The color at the specified offset. public Color Color Field Value Color Offset The position of the stop within the gradient, typically in the range [0, 1]. public NFloat Offset Field Value NFloat Operators implicit operator GradientStop((NFloat Offset, uint Color)) Implicitly converts a tuple of NFloat and uint (0xRRGGBBAA) to a GradientStop. public static implicit operator GradientStop((NFloat Offset, uint Color) pair) Parameters pair (NFloat Offset, uint Color) A tuple containing offset and packed RGBA color. Returns GradientStop implicit operator GradientStop((NFloat Offset, Color Color)) Implicitly converts a tuple of NFloat and Color to a GradientStop. public static implicit operator GradientStop((NFloat Offset, Color Color) pair) Parameters pair (NFloat Offset, Color Color) A tuple containing offset and color. Returns GradientStop"
  },
  "api/Xui.Core.Canvas.IContext.html": {
    "href": "api/Xui.Core.Canvas.IContext.html",
    "title": "Interface IContext | XUI APPS",
    "summary": "Interface IContext Namespace Xui.Core.Canvas Assembly Core.dll Represents a 2D drawing context for the Xui Canvas, modeled after the HTML5 Canvas 2D context API. This interface aggregates all sub-contexts responsible for different aspects of 2D rendering, including state, drawing primitives, text, images, transformations, and resource management. public interface IContext : IStateContext, IPenContext, IPathDrawingContext, IRectDrawingContext, ITextDrawingContext, ITextMeasureContext, IImageDrawingContext, ITransformContext, IDisposable Inherited Members IStateContext.Save() IStateContext.Restore() IPenContext.GlobalAlpha IPenContext.LineCap IPenContext.LineJoin IPenContext.LineWidth IPenContext.MiterLimit IPenContext.LineDashOffset IPenContext.SetLineDash(ReadOnlySpan<NFloat>) IPenContext.SetStroke(Color) IPenContext.SetStroke(LinearGradient) IPenContext.SetStroke(RadialGradient) IPenContext.SetFill(Color) IPenContext.SetFill(LinearGradient) IPenContext.SetFill(RadialGradient) IPathDrawingContext.BeginPath() IPathDrawingContext.MoveTo(Point) IPathDrawingContext.LineTo(Point) IPathDrawingContext.ClosePath() IPathDrawingContext.CurveTo(Point, Point) IPathDrawingContext.CurveTo(Point, Point, Point) IPathDrawingContext.Arc(Point, NFloat, NFloat, NFloat, Winding) IPathDrawingContext.ArcTo(Point, Point, NFloat) IPathDrawingContext.Ellipse(Point, NFloat, NFloat, NFloat, NFloat, NFloat, Winding) IPathDrawingContext.Rect(Rect) IPathDrawingContext.RoundRect(Rect, NFloat) IPathDrawingContext.RoundRect(Rect, CornerRadius) IPathDrawingContext.Fill(FillRule) IPathDrawingContext.Stroke() IPathDrawingContext.Clip() IRectDrawingContext.StrokeRect(Rect) IRectDrawingContext.FillRect(Rect) ITextDrawingContext.TextAlign ITextDrawingContext.TextBaseline ITextDrawingContext.FillText(string, Point) ITextMeasureContext.MeasureText(string) ITextMeasureContext.SetFont(Font) ITransformContext.Translate(Vector) ITransformContext.Rotate(NFloat) ITransformContext.Scale(Vector) ITransformContext.SetTransform(AffineTransform) ITransformContext.Transform(AffineTransform) IDisposable.Dispose() Extension Methods Extensions.PathData(IPathDrawingContext)"
  },
  "api/Xui.Core.Canvas.IImageDrawingContext.html": {
    "href": "api/Xui.Core.Canvas.IImageDrawingContext.html",
    "title": "Interface IImageDrawingContext | XUI APPS",
    "summary": "Interface IImageDrawingContext Namespace Xui.Core.Canvas Assembly Core.dll Defines methods for drawing image-like content onto the canvas, such as bitmaps, video frames, or decoded image buffers. Mirrors the image drawing APIs from the HTML5 Canvas 2D context. https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage public interface IImageDrawingContext"
  },
  "api/Xui.Core.Canvas.IPathDrawingContext.html": {
    "href": "api/Xui.Core.Canvas.IPathDrawingContext.html",
    "title": "Interface IPathDrawingContext | XUI APPS",
    "summary": "Interface IPathDrawingContext Namespace Xui.Core.Canvas Assembly Core.dll Defines methods for constructing and rendering 2D paths, following the HTML5 Canvas path API model. Reference: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D#paths public interface IPathDrawingContext Extension Methods Extensions.PathData(IPathDrawingContext) Methods Arc(Point, NFloat, NFloat, NFloat, Winding) Adds an arc to the path centered at the specified point. void Arc(Point center, NFloat radius, NFloat startAngle, NFloat endAngle, Winding winding = Winding.ClockWise) Parameters center Point Center of the arc. radius NFloat Radius of the arc. startAngle NFloat Start angle in radians. endAngle NFloat End angle in radians. winding Winding Direction in which the arc is drawn. ArcTo(Point, Point, NFloat) Adds an arc to the path, connecting two tangents defined by control points. void ArcTo(Point cp1, Point cp2, NFloat radius) Parameters cp1 Point First control point. cp2 Point Second control point. radius NFloat Arc radius. BeginPath() Begins a new path by resetting the current path list. void BeginPath() Clip() Sets the current clipping region to the current path. Subsequent drawing operations are clipped to this region. void Clip() ClosePath() Closes the current sub-path by drawing a straight line back to the start point. void ClosePath() CurveTo(Point, Point) Draws a quadratic Bézier curve from the current point to the specified point, using the given control point. void CurveTo(Point cp1, Point to) Parameters cp1 Point Control point. to Point End point. CurveTo(Point, Point, Point) Draws a cubic Bézier curve from the current point to the specified point, using two control points. void CurveTo(Point cp1, Point cp2, Point to) Parameters cp1 Point First control point. cp2 Point Second control point. to Point End point. Ellipse(Point, NFloat, NFloat, NFloat, NFloat, NFloat, Winding) Adds an elliptical arc to the path. void Ellipse(Point center, NFloat radiusX, NFloat radiusY, NFloat rotation, NFloat startAngle, NFloat endAngle, Winding winding = Winding.ClockWise) Parameters center Point Center of the ellipse. radiusX NFloat Horizontal radius. radiusY NFloat Vertical radius. rotation NFloat Rotation of the ellipse, in radians. startAngle NFloat Start angle in radians. endAngle NFloat End angle in radians. winding Winding Direction in which the arc is drawn. Fill(FillRule) Fills the current path using the specified fill rule. void Fill(FillRule rule = FillRule.NonZero) Parameters rule FillRule The fill rule to use (NonZero or EvenOdd). LineTo(Point) Connects the current point to the specified point with a straight line. void LineTo(Point to) Parameters to Point The endpoint of the line. MoveTo(Point) Moves the current point to the specified location without drawing a line. void MoveTo(Point to) Parameters to Point The destination point. Rect(Rect) Adds a rectangle path to the current path. void Rect(Rect rect) Parameters rect Rect The rectangle to add. RoundRect(Rect, NFloat) Adds a rounded rectangle path with a uniform radius. void RoundRect(Rect rect, NFloat radius) Parameters rect Rect The rectangle to round. radius NFloat Corner radius. RoundRect(Rect, CornerRadius) Adds a rounded rectangle path with per-corner radii. void RoundRect(Rect rect, CornerRadius radius) Parameters rect Rect The rectangle to round. radius CornerRadius Corner radius object defining each corner. Stroke() Strokes the current path using the current stroke style. void Stroke()"
  },
  "api/Xui.Core.Canvas.IPenContext.html": {
    "href": "api/Xui.Core.Canvas.IPenContext.html",
    "title": "Interface IPenContext | XUI APPS",
    "summary": "Interface IPenContext Namespace Xui.Core.Canvas Assembly Core.dll Defines properties and methods for controlling stroke and fill styles in a 2D drawing context, including line caps, joins, width, dashes, and brush settings for fill and stroke. public interface IPenContext Properties GlobalAlpha Sets the global alpha value for all drawing operations. Range: 0.0 (fully transparent) to 1.0 (fully opaque). NFloat GlobalAlpha { set; } Property Value NFloat LineCap Sets the style of line caps used for strokes. LineCap LineCap { set; } Property Value LineCap LineDashOffset Sets the phase offset for the start of the dash pattern. NFloat LineDashOffset { set; } Property Value NFloat LineJoin Sets the style of line joins between segments. LineJoin LineJoin { set; } Property Value LineJoin LineWidth Sets the width of stroked lines, in user space units. NFloat LineWidth { set; } Property Value NFloat MiterLimit Sets the miter limit ratio for miter joins. If the ratio of miter length to line width exceeds this value, a bevel join is used instead. NFloat MiterLimit { set; } Property Value NFloat Methods SetFill(Color) Sets the fill style to a solid color. void SetFill(Color color) Parameters color Color The fill color. SetFill(LinearGradient) Sets the fill style to a linear gradient. void SetFill(LinearGradient linearGradient) Parameters linearGradient LinearGradient The gradient to use for filling shapes. SetFill(RadialGradient) Sets the fill style to a radial gradient. void SetFill(RadialGradient radialGradient) Parameters radialGradient RadialGradient The gradient to use for filling shapes. SetLineDash(ReadOnlySpan<NFloat>) Sets the dash pattern used for stroking lines. Each element in the span represents a dash or gap length, alternating. void SetLineDash(ReadOnlySpan<NFloat> segments) Parameters segments ReadOnlySpan<NFloat> A sequence of dash and gap lengths. SetStroke(Color) Sets the stroke style to a solid color. void SetStroke(Color color) Parameters color Color The stroke color. SetStroke(LinearGradient) Sets the stroke style to a linear gradient. void SetStroke(LinearGradient linearGradient) Parameters linearGradient LinearGradient The gradient to use for stroking paths. SetStroke(RadialGradient) Sets the stroke style to a radial gradient. void SetStroke(RadialGradient radialGradient) Parameters radialGradient RadialGradient The gradient to use for stroking paths."
  },
  "api/Xui.Core.Canvas.IRectDrawingContext.html": {
    "href": "api/Xui.Core.Canvas.IRectDrawingContext.html",
    "title": "Interface IRectDrawingContext | XUI APPS",
    "summary": "Interface IRectDrawingContext Namespace Xui.Core.Canvas Assembly Core.dll Provides convenience methods for drawing filled and stroked rectangles, similar to the fillRect() and strokeRect() functions in the HTML5 Canvas API. public interface IRectDrawingContext Methods FillRect(Rect) Fills the specified rectangle using the current fill style. void FillRect(Rect rect) Parameters rect Rect The rectangle to fill. StrokeRect(Rect) Draws the outline of the specified rectangle using the current stroke style. void StrokeRect(Rect rect) Parameters rect Rect The rectangle to stroke."
  },
  "api/Xui.Core.Canvas.IStateContext.html": {
    "href": "api/Xui.Core.Canvas.IStateContext.html",
    "title": "Interface IStateContext | XUI APPS",
    "summary": "Interface IStateContext Namespace Xui.Core.Canvas Assembly Core.dll Provides methods to save and restore the current drawing state, including styles, transforms, and clipping paths. Mirrors the behavior of the HTML5 Canvas save() and restore() methods. public interface IStateContext Methods Restore() Pops the top state off the state stack and restores it. Any modifications made since the last Save() are discarded. void Restore() Save() Pushes the current drawing state onto the state stack. This includes styles, transformations, clipping paths, etc. void Save()"
  },
  "api/Xui.Core.Canvas.ITextDrawingContext.html": {
    "href": "api/Xui.Core.Canvas.ITextDrawingContext.html",
    "title": "Interface ITextDrawingContext | XUI APPS",
    "summary": "Interface ITextDrawingContext Namespace Xui.Core.Canvas Assembly Core.dll Defines methods for drawing text onto the canvas, including alignment and baseline options. Mirrors the HTML5 Canvas 2D text API for fillText(). Also provides access to text measurement via ITextMeasureContext. public interface ITextDrawingContext : ITextMeasureContext Inherited Members ITextMeasureContext.MeasureText(string) ITextMeasureContext.SetFont(Font) Properties TextAlign Sets the horizontal alignment of the text relative to the given position. TextAlign TextAlign { set; } Property Value TextAlign TextBaseline Sets the vertical alignment of the text relative to the given baseline. TextBaseline TextBaseline { set; } Property Value TextBaseline Methods FillText(string, Point) Draws filled text at the specified position using the current fill style and font settings. void FillText(string text, Point pos) Parameters text string The text string to render. pos Point The position at which to start rendering the text."
  },
  "api/Xui.Core.Canvas.ITextMeasureContext.html": {
    "href": "api/Xui.Core.Canvas.ITextMeasureContext.html",
    "title": "Interface ITextMeasureContext | XUI APPS",
    "summary": "Interface ITextMeasureContext Namespace Xui.Core.Canvas Assembly Core.dll Provides functionality for measuring text and setting font properties. Mirrors the measurement behavior of the HTML5 Canvas 2D context. public interface ITextMeasureContext Methods MeasureText(string) Measures the width and height of the specified text string using the current font. Vector MeasureText(string text) Parameters text string The text string to measure. Returns Vector A Vector representing the size of the rendered text. Typically, X is width and Y is line height or baseline ascent. SetFont(Font) Sets the font used for all subsequent text drawing and measurement operations. void SetFont(Font font) Parameters font Font The font definition to apply."
  },
  "api/Xui.Core.Canvas.ITransformContext.html": {
    "href": "api/Xui.Core.Canvas.ITransformContext.html",
    "title": "Interface ITransformContext | XUI APPS",
    "summary": "Interface ITransformContext Namespace Xui.Core.Canvas Assembly Core.dll Provides methods for manipulating the current transformation matrix of the drawing context. This includes translation, scaling, rotation, and applying affine transformations. Mirrors the transformation API of the HTML5 Canvas 2D context. public interface ITransformContext Methods Rotate(NFloat) Applies a clockwise rotation to the current transform. void Rotate(NFloat angle) Parameters angle NFloat The rotation angle in radians. Scale(Vector) Applies a scaling transformation using the specified scaling factors. void Scale(Vector vector) Parameters vector Vector The scaling vector (sx, sy). SetTransform(AffineTransform) Resets the current transformation matrix to the identity matrix, then replaces it with the specified transform. Equivalent to ctx.setTransform(...) in HTML5 Canvas. void SetTransform(AffineTransform transform) Parameters transform AffineTransform The new transformation matrix to apply. Transform(AffineTransform) Multiplies the current transformation matrix by the specified matrix. This is equivalent to applying an additional transformation on top of the existing one. void Transform(AffineTransform matrix) Parameters matrix AffineTransform The matrix to multiply with the current transform. Translate(Vector) Applies a translation by the specified vector. This offsets all subsequent drawing operations by the given amount. void Translate(Vector vector) Parameters vector Vector The translation vector (dx, dy)."
  },
  "api/Xui.Core.Canvas.LineCap.html": {
    "href": "api/Xui.Core.Canvas.LineCap.html",
    "title": "Enum LineCap | XUI APPS",
    "summary": "Enum LineCap Namespace Xui.Core.Canvas Assembly Core.dll Specifies the shape used at the ends of lines when stroking paths. Mirrors the lineCap property in the HTML5 Canvas API. public enum LineCap Fields Butt = 0 The line ends exactly at the endpoint with no additional extension. This is the default. Round = 1 The line ends with a semicircular extension, centered on the endpoint. Square = 2 The line ends with a square extension equal to half the line width, extending beyond the endpoint."
  },
  "api/Xui.Core.Canvas.LineJoin.html": {
    "href": "api/Xui.Core.Canvas.LineJoin.html",
    "title": "Enum LineJoin | XUI APPS",
    "summary": "Enum LineJoin Namespace Xui.Core.Canvas Assembly Core.dll Specifies how two connected lines are joined when stroking a path. Mirrors the lineJoin property in the HTML5 Canvas API. public enum LineJoin Fields Bevel = 2 Lines are joined with a beveled corner by connecting the outer corners of the strokes. Miter = 0 Lines are joined with a sharp corner or extended miter, depending on the miter limit. Round = 1 Lines are joined with a circular arc, creating a rounded corner."
  },
  "api/Xui.Core.Canvas.LinearGradient.html": {
    "href": "api/Xui.Core.Canvas.LinearGradient.html",
    "title": "Struct LinearGradient | XUI APPS",
    "summary": "Struct LinearGradient Namespace Xui.Core.Canvas Assembly Core.dll Represents a linear gradient brush that transitions between colors along a straight line, following the same behavior as the HTML5 Canvas createLinearGradient(). public ref struct LinearGradient Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LinearGradient(Point, Point, ReadOnlySpan<GradientStop>) Creates a new LinearGradient with the given start and end points and gradient stops. public LinearGradient(Point start, Point end, ReadOnlySpan<GradientStop> gradient) Parameters start Point The start point of the gradient. end Point The end point of the gradient. gradient ReadOnlySpan<GradientStop> A span of gradient stops sorted by offset. Fields EndPoint The ending point of the gradient, in user space coordinates. public Point EndPoint Field Value Point GradientStops The sequence of gradient stops that define color transitions along the line. Offsets are typically in the range [0, 1]. public ReadOnlySpan<GradientStop> GradientStops Field Value ReadOnlySpan<GradientStop> StartPoint The starting point of the gradient, in user space coordinates. public Point StartPoint Field Value Point"
  },
  "api/Xui.Core.Canvas.PaintStyle.html": {
    "href": "api/Xui.Core.Canvas.PaintStyle.html",
    "title": "Enum PaintStyle | XUI APPS",
    "summary": "Enum PaintStyle Namespace Xui.Core.Canvas Assembly Core.dll Specifies the type of brush or fill style used for painting shapes or strokes. Helps distinguish between solid colors and gradient fills. public enum PaintStyle Fields LinearGradient = 1 A linear gradient that transitions colors along a straight line. RadialGradient = 2 A radial gradient that transitions colors outward in a circular or elliptical shape. SolidColor = 0 A single, uniform color."
  },
  "api/Xui.Core.Canvas.RadialGradient.html": {
    "href": "api/Xui.Core.Canvas.RadialGradient.html",
    "title": "Struct RadialGradient | XUI APPS",
    "summary": "Struct RadialGradient Namespace Xui.Core.Canvas Assembly Core.dll Represents a radial gradient brush that transitions colors outward from one circle to another, similar to createRadialGradient() in the HTML5 Canvas API. public ref struct RadialGradient Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors RadialGradient(Point, NFloat, ReadOnlySpan<GradientStop>) Initializes a radial gradient from a single point and radius, fading outward from a solid center. This is equivalent to setting the start radius to zero and both centers to the same point. public RadialGradient(Point center, NFloat radius, ReadOnlySpan<GradientStop> gradientStops) Parameters center Point Center point of the gradient. radius NFloat Radius of the gradient spread. gradientStops ReadOnlySpan<GradientStop> Span of color stops defining the gradient transition. RadialGradient(Point, NFloat, Point, NFloat, ReadOnlySpan<GradientStop>) Initializes a radial gradient that transitions between two circles. public RadialGradient(Point startCenter, NFloat startRadius, Point endCenter, NFloat endRadius, ReadOnlySpan<GradientStop> gradientStops) Parameters startCenter Point Center of the inner circle. startRadius NFloat Radius of the inner circle. endCenter Point Center of the outer circle. endRadius NFloat Radius of the outer circle. gradientStops ReadOnlySpan<GradientStop> Span of color stops defining the gradient transition. Fields EndCenter The center point of the ending circle (outer circle). public Point EndCenter Field Value Point EndRadius The radius of the ending circle (outer circle), defining the spread of the gradient. public NFloat EndRadius Field Value NFloat GradientStops A sequence of color stops defining how colors are interpolated from the inner to the outer circle. Offsets are typically in the range [0, 1]. public ReadOnlySpan<GradientStop> GradientStops Field Value ReadOnlySpan<GradientStop> StartCenter The center point of the starting circle (inner circle). public Point StartCenter Field Value Point StartRadius The radius of the starting circle (inner circle), usually 0 for solid centers. public NFloat StartRadius Field Value NFloat"
  },
  "api/Xui.Core.Canvas.SVG.Extensions.html": {
    "href": "api/Xui.Core.Canvas.SVG.Extensions.html",
    "title": "Class Extensions | XUI APPS",
    "summary": "Class Extensions Namespace Xui.Core.Canvas.SVG Assembly Core.dll Provides SVG-related extension methods for the IPathDrawingContext interface. public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PathData(IPathDrawingContext) Creates a PathDataBuilder for the given path drawing context. This enables fluent parsing or construction of SVG path commands targeting the current canvas context. public static PathDataBuilder PathData(this IPathDrawingContext @this) Parameters this IPathDrawingContext The path drawing context (e.g., a canvas or drawing surface). Returns PathDataBuilder A PathDataBuilder instance for building or parsing SVG paths."
  },
  "api/Xui.Core.Canvas.SVG.PathDataBuilder.html": {
    "href": "api/Xui.Core.Canvas.SVG.PathDataBuilder.html",
    "title": "Struct PathDataBuilder | XUI APPS",
    "summary": "Struct PathDataBuilder Namespace Xui.Core.Canvas.SVG Assembly Core.dll A utility for converting parsed SVG path commands into drawing operations on an IPathDrawingContext target. This builder supports both absolute (e.g., M, L, C) and relative (e.g., m, l, c) SVG commands, and tracks the current drawing point and control points for smooth curves. public ref struct PathDataBuilder Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors PathDataBuilder(IPathDrawingContext) Initializes a new PathDataBuilder targeting the specified drawing context. public PathDataBuilder(IPathDrawingContext sink) Parameters sink IPathDrawingContext The drawing context that will receive the path instructions. Fields CurrentPoint The current position of the pen after the last command. public Point CurrentPoint Field Value Point NextCubicControlPoint The reflected control point for the next cubic Bézier curve (used in S, s). public Point NextCubicControlPoint Field Value Point NextQuadraticControlPoint The reflected control point for the next quadratic Bézier curve (used in T, t). public Point NextQuadraticControlPoint Field Value Point Sink The target drawing context that receives path commands. public readonly IPathDrawingContext Sink Field Value IPathDrawingContext StartPoint The starting point of the current subpath (used for Z command). public Point? StartPoint Field Value Point? Methods A(Vector, NFloat, ArcFlag, Winding, Point) public PathDataBuilder A(Vector sr, NFloat xAxisRotationDeg, ArcFlag largeArcFlag, Winding sweepDirection, Point p2) Parameters sr Vector xAxisRotationDeg NFloat largeArcFlag ArcFlag sweepDirection Winding p2 Point Returns PathDataBuilder Begin() Begins a new path on the drawing context. public PathDataBuilder Begin() Returns PathDataBuilder C(Point, Point, Point) public PathDataBuilder C(Point cp1, Point cp2, Point to) Parameters cp1 Point cp2 Point to Point Returns PathDataBuilder H(NFloat) public PathDataBuilder H(NFloat h) Parameters h NFloat Returns PathDataBuilder L(Point) public PathDataBuilder L(Point point) Parameters point Point Returns PathDataBuilder M(Point) public PathDataBuilder M(Point point) Parameters point Point Returns PathDataBuilder Q(Point, Point) public PathDataBuilder Q(Point cp, Point to) Parameters cp Point to Point Returns PathDataBuilder S(Point, Point) public PathDataBuilder S(Point cp, Point to) Parameters cp Point to Point Returns PathDataBuilder T(Point) public PathDataBuilder T(Point to) Parameters to Point Returns PathDataBuilder V(NFloat) public PathDataBuilder V(NFloat v) Parameters v NFloat Returns PathDataBuilder Z() public PathDataBuilder Z() Returns PathDataBuilder a(Vector, NFloat, ArcFlag, Winding, Vector) public PathDataBuilder a(Vector v2, NFloat xAxisRotationDeg, ArcFlag largeArcFlag, Winding sweepDirection, Vector sr) Parameters v2 Vector xAxisRotationDeg NFloat largeArcFlag ArcFlag sweepDirection Winding sr Vector Returns PathDataBuilder c(Vector, Vector, Vector) public PathDataBuilder c(Vector cv1, Vector cv2, Vector to) Parameters cv1 Vector cv2 Vector to Vector Returns PathDataBuilder h(NFloat) public PathDataBuilder h(NFloat h) Parameters h NFloat Returns PathDataBuilder l(Vector) public PathDataBuilder l(Vector vector) Parameters vector Vector Returns PathDataBuilder m(Vector) public PathDataBuilder m(Vector vector) Parameters vector Vector Returns PathDataBuilder q(Vector, Vector) public PathDataBuilder q(Vector cv, Vector to) Parameters cv Vector to Vector Returns PathDataBuilder s(Vector, Vector) public PathDataBuilder s(Vector cv, Vector to) Parameters cv Vector to Vector Returns PathDataBuilder t(Vector) public PathDataBuilder t(Vector to) Parameters to Vector Returns PathDataBuilder v(NFloat) public PathDataBuilder v(NFloat v) Parameters v NFloat Returns PathDataBuilder z() public PathDataBuilder z() Returns PathDataBuilder"
  },
  "api/Xui.Core.Canvas.SVG.html": {
    "href": "api/Xui.Core.Canvas.SVG.html",
    "title": "Namespace Xui.Core.Canvas.SVG | XUI APPS",
    "summary": "Namespace Xui.Core.Canvas.SVG Classes Extensions Provides SVG-related extension methods for the IPathDrawingContext interface. Structs PathDataBuilder A utility for converting parsed SVG path commands into drawing operations on an IPathDrawingContext target. This builder supports both absolute (e.g., M, L, C) and relative (e.g., m, l, c) SVG commands, and tracks the current drawing point and control points for smooth curves."
  },
  "api/Xui.Core.Canvas.TextAlign.html": {
    "href": "api/Xui.Core.Canvas.TextAlign.html",
    "title": "Enum TextAlign | XUI APPS",
    "summary": "Enum TextAlign Namespace Xui.Core.Canvas Assembly Core.dll Specifies the horizontal alignment of text relative to the drawing position. Mirrors the textAlign property in the HTML5 Canvas 2D API. public enum TextAlign Fields Center = 4 Centers the text horizontally around the drawing position. End = 1 Aligns text to the end of the writing direction (right for LTR, left for RTL). Left = 2 Aligns text to the left, regardless of writing direction. Right = 3 Aligns text to the right, regardless of writing direction. Start = 0 Aligns text to the start of the writing direction (left for LTR, right for RTL)."
  },
  "api/Xui.Core.Canvas.TextBaseline.html": {
    "href": "api/Xui.Core.Canvas.TextBaseline.html",
    "title": "Enum TextBaseline | XUI APPS",
    "summary": "Enum TextBaseline Namespace Xui.Core.Canvas Assembly Core.dll Specifies the vertical alignment of text relative to the drawing position. Mirrors the textBaseline property in the HTML5 Canvas 2D API. public enum TextBaseline Fields Alphabetic = 3 The alphabetic baseline (default for Latin scripts) is aligned with the drawing position. Bottom = 5 The bottom of the em box is aligned with the drawing position. Hanging = 1 The hanging baseline is aligned with the drawing position (used in some scripts like Devanagari). Ideographic = 4 The ideographic baseline is aligned with the drawing position (used in scripts like Chinese or Japanese). Middle = 2 The middle of the text (roughly half the em height) is aligned with the drawing position. Top = 0 The top of the em box is aligned with the drawing position."
  },
  "api/Xui.Core.Canvas.Winding.html": {
    "href": "api/Xui.Core.Canvas.Winding.html",
    "title": "Enum Winding | XUI APPS",
    "summary": "Enum Winding Namespace Xui.Core.Canvas Assembly Core.dll Specifies the direction in which arcs or elliptical curves are drawn, affecting fill and stroke behavior in path-based rendering. public enum Winding Fields ClockWise = 1 The path is drawn in a clockwise direction. This is the default in most canvas and geometry operations. CounterClockWise = 0 The path is drawn in a counter-clockwise direction."
  },
  "api/Xui.Core.Canvas.html": {
    "href": "api/Xui.Core.Canvas.html",
    "title": "Namespace Xui.Core.Canvas | XUI APPS",
    "summary": "Namespace Xui.Core.Canvas Namespaces Xui.Core.Canvas.SVG Classes Colors Provides web standard named color constants in 32-bit RGBA format (0xRRGGBBAA). These match the named colors from the CSS color specification: https://developer.mozilla.org/en-US/docs/Web/CSS/named-color Structs Color Represents a color using red, green, blue, and alpha components, all normalized to the range [0, 1]. CornerRadius Represents the radius of each corner of a rectangle, allowing for uniform or non-uniform rounding. Font Describes a font used for text layout and rendering, similar to the CSS font model. FontStyle Represents a web-like font style, supporting normal, italic, and oblique variations. Global CSS styles like inherit, unset, and initial are not supported. Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/font-style GradientStop Represents a single color stop in a gradient, defined by an offset and a color. Used for both linear and radial gradients. LinearGradient Represents a linear gradient brush that transitions between colors along a straight line, following the same behavior as the HTML5 Canvas createLinearGradient(). RadialGradient Represents a radial gradient brush that transitions colors outward from one circle to another, similar to createRadialGradient() in the HTML5 Canvas API. Interfaces IContext Represents a 2D drawing context for the Xui Canvas, modeled after the HTML5 Canvas 2D context API. This interface aggregates all sub-contexts responsible for different aspects of 2D rendering, including state, drawing primitives, text, images, transformations, and resource management. IImageDrawingContext Defines methods for drawing image-like content onto the canvas, such as bitmaps, video frames, or decoded image buffers. Mirrors the image drawing APIs from the HTML5 Canvas 2D context. https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage IPathDrawingContext Defines methods for constructing and rendering 2D paths, following the HTML5 Canvas path API model. Reference: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D#paths IPenContext Defines properties and methods for controlling stroke and fill styles in a 2D drawing context, including line caps, joins, width, dashes, and brush settings for fill and stroke. IRectDrawingContext Provides convenience methods for drawing filled and stroked rectangles, similar to the fillRect() and strokeRect() functions in the HTML5 Canvas API. IStateContext Provides methods to save and restore the current drawing state, including styles, transforms, and clipping paths. Mirrors the behavior of the HTML5 Canvas save() and restore() methods. ITextDrawingContext Defines methods for drawing text onto the canvas, including alignment and baseline options. Mirrors the HTML5 Canvas 2D text API for fillText(). Also provides access to text measurement via ITextMeasureContext. ITextMeasureContext Provides functionality for measuring text and setting font properties. Mirrors the measurement behavior of the HTML5 Canvas 2D context. ITransformContext Provides methods for manipulating the current transformation matrix of the drawing context. This includes translation, scaling, rotation, and applying affine transformations. Mirrors the transformation API of the HTML5 Canvas 2D context. Enums FillRule Specifies the algorithm used to determine the \"insideness\" of a point in a path, controlling how filled shapes are rendered. LineCap Specifies the shape used at the ends of lines when stroking paths. Mirrors the lineCap property in the HTML5 Canvas API. LineJoin Specifies how two connected lines are joined when stroking a path. Mirrors the lineJoin property in the HTML5 Canvas API. PaintStyle Specifies the type of brush or fill style used for painting shapes or strokes. Helps distinguish between solid colors and gradient fills. TextAlign Specifies the horizontal alignment of text relative to the drawing position. Mirrors the textAlign property in the HTML5 Canvas 2D API. TextBaseline Specifies the vertical alignment of text relative to the drawing position. Mirrors the textBaseline property in the HTML5 Canvas 2D API. Winding Specifies the direction in which arcs or elliptical curves are drawn, affecting fill and stroke behavior in path-based rendering."
  },
  "api/Xui.Core.Curves2D.Bezier.html": {
    "href": "api/Xui.Core.Curves2D.Bezier.html",
    "title": "Class Bezier | XUI APPS",
    "summary": "Class Bezier Namespace Xui.Core.Curves2D Assembly Core.dll Static helper methods for constructing Bézier curves. public static class Bezier Inheritance object Bezier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Cubic(Point, Point, Point, Point) Creates a cubic Bézier curve from four control points. public static CubicBezier Cubic(Point p0, Point p1, Point p2, Point p3) Parameters p0 Point p1 Point p2 Point p3 Point Returns CubicBezier Linear(Point, Point) Creates a linear Bézier curve from two points. public static LinearBezier Linear(Point p0, Point p1) Parameters p0 Point p1 Point Returns LinearBezier Quadratic(Point, Point, Point) Creates a quadratic Bézier curve from three control points. public static QuadraticBezier Quadratic(Point p0, Point p1, Point p2) Parameters p0 Point p1 Point p2 Point Returns QuadraticBezier"
  },
  "api/Xui.Core.Curves2D.CubicBezier.html": {
    "href": "api/Xui.Core.Curves2D.CubicBezier.html",
    "title": "Struct CubicBezier | XUI APPS",
    "summary": "Struct CubicBezier Namespace Xui.Core.Curves2D Assembly Core.dll Represents a cubic Bézier curve defined by four control points. public readonly struct CubicBezier : ICurve Implements ICurve Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks A cubic Bézier curve provides smooth interpolation between P0 and P3, influenced by the control points P1 and P2. This is commonly used in vector graphics, animation timing, and layout paths. Constructors CubicBezier(Point, Point, Point, Point) Initializes a new cubic Bézier curve with the specified control points. public CubicBezier(Point p0, Point p1, Point p2, Point p3) Parameters p0 Point p1 Point p2 Point p3 Point Fields P0 The starting point of the curve. public readonly Point P0 Field Value Point P1 The first control point, influencing the curve near P0. public readonly Point P1 Field Value Point P2 The second control point, influencing the curve near P3. public readonly Point P2 Field Value Point P3 The ending point of the curve. public readonly Point P3 Field Value Point Properties this[NFloat] Gets the interpolated point on the curve at the specified parameter. public Point this[NFloat t] { get; } Parameters t NFloat A normalized parameter in the range [0, 1]. Property Value Point Methods ClosestT(Point) Returns the parameter t ∈ [0, 1] at which the curve is closest to the specified target point. This version uses uniform sampling with 16 segments and is fast enough for interactive use. public NFloat ClosestT(Point target) Parameters target Point The point to compare against the curve. Returns NFloat The approximate t value where the curve is closest to target. ClosestT(Point, NFloat) Returns the parameter t ∈ [0, 1] at which the curve is closest to the specified target point, using recursive ternary subdivision until the difference in t range is less than precision. public NFloat ClosestT(Point target, NFloat precision) Parameters target Point The point to compare against the curve. precision NFloat The minimum resolution for t convergence. Smaller values yield more accurate results. Returns NFloat The t value where the curve is closest to target within the specified precision. Drag(NFloat, Vector) Returns a new CubicBezier curve where the control points P1 and P2 are adjusted based on a drag gesture at a given parametric position t. public CubicBezier Drag(NFloat t, Vector delta) Parameters t NFloat A normalized value (between 0 and 1) representing the position on the curve where the drag occurs. delta Vector The drag vector representing how far the user dragged the point at t. Returns CubicBezier A new CubicBezier with P0 and P3 unchanged, and P1 and P2 adjusted proportionally to the drag direction and distance. Remarks The influence of the drag on P1 and P2 is weighted quadratically based on their distance from t along the curve: P1 is influenced by (1 - t)² and P2 by t². This preserves the endpoints while allowing intuitive manipulation of the curve shape. DragAt(Point, Vector) Returns a new cubic Bézier curve with adjusted control points so the point on the curve nearest to origin is moved by delta. public CubicBezier DragAt(Point origin, Vector delta) Parameters origin Point delta Vector Returns CubicBezier DragAt(Point, Vector, NFloat) Returns a new cubic Bézier curve with adjusted control points so the point on the curve nearest to origin is moved by delta. Uses recursive refinement based on the specified precision. public CubicBezier DragAt(Point origin, Vector delta, NFloat precision) Parameters origin Point delta Vector precision NFloat Returns CubicBezier Length() Approximates the arc length of the curve using uniform sampling with 16 segments. public NFloat Length() Returns NFloat Length(NFloat) Approximates the arc length of the curve using recursive adaptive subdivision. public NFloat Length(NFloat precision) Parameters precision NFloat The tolerance value used to determine when a segment is flat enough to stop subdividing. Smaller values result in more accurate results but require more computation. Returns NFloat Lerp(NFloat) Computes the interpolated point on the curve at parameter t using De Casteljau’s algorithm. public Point Lerp(NFloat t) Parameters t NFloat A normalized parameter in the range [0, 1]. Returns Point Tangent(NFloat) Computes the tangent vector of the curve at parameter t. public Vector Tangent(NFloat t) Parameters t NFloat A normalized parameter in the range [0, 1]. Returns Vector Operators implicit operator CubicBezier((Point p0, Point p1, Point p2, Point p3)) Implicitly converts a tuple of four points into a CubicBezier. public static implicit operator CubicBezier((Point p0, Point p1, Point p2, Point p3) value) Parameters value (Point p0, Point p1, Point p2, Point p3) A tuple representing the start point, two control points, and end point. Returns CubicBezier implicit operator CubicBezier(CubicSpline) Implicitly converts this cubic Catmull–Rom spline to a CubicBezier. public static implicit operator CubicBezier(CubicSpline spline) Parameters spline CubicSpline Returns CubicBezier Remarks Uses the canonical Catmull–Rom to Bézier mapping, interpolating between P1 and P2. implicit operator CubicBezier(QuadraticBezier) Implicitly converts a QuadraticBezier to a CubicBezier using interpolation for smooth parameterization. public static implicit operator CubicBezier(QuadraticBezier quadratic) Parameters quadratic QuadraticBezier Returns CubicBezier Remarks This conversion evaluates the quadratic Bézier at fixed steps (1⁄3 and 2⁄3) to generate the internal control points of the cubic, resulting in a visually smooth upgrade path."
  },
  "api/Xui.Core.Curves2D.CubicSpline.html": {
    "href": "api/Xui.Core.Curves2D.CubicSpline.html",
    "title": "Struct CubicSpline | XUI APPS",
    "summary": "Struct CubicSpline Namespace Xui.Core.Curves2D Assembly Core.dll Represents a 4-point spline segment using Catmull–Rom interpolation. The curve interpolates smoothly between P1 and P2. public readonly struct CubicSpline : ICurve Implements ICurve Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks Catmull–Rom splines are useful for generating smooth curves through a sequence of points with minimal configuration. This implementation produces a C¹-continuous cubic curve, influenced by neighboring control points P0 and P3. The segment can also be converted into a CubicBezier for drawing or compatibility. Constructors CubicSpline(Point, Point, Point, Point) Initializes a new Catmull–Rom spline segment from four control points. public CubicSpline(Point p0, Point p1, Point p2, Point p3) Parameters p0 Point p1 Point p2 Point p3 Point Fields P0 The control point before the start of the curve. public readonly Point P0 Field Value Point P1 The starting point of the interpolated segment. public readonly Point P1 Field Value Point P2 The ending point of the interpolated segment. public readonly Point P2 Field Value Point P3 The control point after the end of the curve. public readonly Point P3 Field Value Point Properties this[NFloat] Indexer-style access to evaluate the curve at a given parameter. public Point this[NFloat t] { get; } Parameters t NFloat Property Value Point Methods Length() Approximates the arc length of the curve using uniform sampling with 16 segments. public NFloat Length() Returns NFloat Length(NFloat) Approximates the arc length using recursive adaptive subdivision. public NFloat Length(NFloat precision) Parameters precision NFloat The tolerance used to decide subdivision depth. Returns NFloat Lerp(NFloat) Evaluates the point on the spline at the given parameter t using the Catmull–Rom formula. public Point Lerp(NFloat t) Parameters t NFloat A normalized parameter in the range [0, 1]. Returns Point Tangent(NFloat) Computes the tangent vector at parameter t by differentiating the spline. public Vector Tangent(NFloat t) Parameters t NFloat A normalized parameter in the range [0, 1]. Returns Vector Operators implicit operator CubicBezier(CubicSpline) Converts this Catmull–Rom spline segment to an equivalent CubicBezier. The resulting curve interpolates between P1 and P2. public static implicit operator CubicBezier(CubicSpline s) Parameters s CubicSpline Returns CubicBezier"
  },
  "api/Xui.Core.Curves2D.ICurve.html": {
    "href": "api/Xui.Core.Curves2D.ICurve.html",
    "title": "Interface ICurve | XUI APPS",
    "summary": "Interface ICurve Namespace Xui.Core.Curves2D Assembly Core.dll Represents a common interface for evaluable 2D curves. public interface ICurve Properties this[NFloat] Provides indexer access as an alias for Lerp(NFloat). Point this[NFloat t] { get; } Parameters t NFloat Property Value Point Methods Length() Computes an approximate arc length using 16 steps. NFloat Length() Returns NFloat Length(NFloat) Computes a refined approximation of arc length with a specified precision. NFloat Length(NFloat precision) Parameters precision NFloat Returns NFloat Lerp(NFloat) Evaluates the curve at the given normalized parameter t in [0, 1]. Point Lerp(NFloat t) Parameters t NFloat Returns Point Tangent(NFloat) Computes the tangent vector at the specified t. Vector Tangent(NFloat t) Parameters t NFloat Returns Vector"
  },
  "api/Xui.Core.Curves2D.LinearBezier.html": {
    "href": "api/Xui.Core.Curves2D.LinearBezier.html",
    "title": "Struct LinearBezier | XUI APPS",
    "summary": "Struct LinearBezier Namespace Xui.Core.Curves2D Assembly Core.dll Represents a linear Bézier curve, equivalent to a straight line between two points. public readonly struct LinearBezier : ICurve Implements ICurve Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This is the simplest form of Bézier curve, defined by two points P0 and P1. It is often used for edges of polygonal paths or degenerate forms of higher-order Béziers. Constructors LinearBezier(Point, Point) Initializes a new LinearBezier curve with the given start and end points. public LinearBezier(Point p0, Point p1) Parameters p0 Point The starting point. p1 Point The ending point. Fields P0 The start point of the curve. public readonly Point P0 Field Value Point P1 The end point of the curve. public readonly Point P1 Field Value Point Properties this[NFloat] Indexer-style access to the interpolated point at parameter t. public Point this[NFloat t] { get; } Parameters t NFloat Property Value Point Methods Length() Returns the exact length of the line segment. public NFloat Length() Returns NFloat Length(NFloat) Returns the length of the line segment. This overload ignores the precision parameter. public NFloat Length(NFloat precision) Parameters precision NFloat Returns NFloat Lerp(NFloat) Computes the point on the line at parameter t using linear interpolation. public Point Lerp(NFloat t) Parameters t NFloat A normalized parameter in the range [0, 1]. Returns Point Tangent(NFloat) Returns the constant tangent vector of the line segment. public Vector Tangent(NFloat t) Parameters t NFloat The curve parameter (ignored since the tangent is constant). Returns Vector Operators implicit operator LinearBezier((Point p0, Point p1)) Implicitly converts a tuple of two points into a LinearBezier. public static implicit operator LinearBezier((Point p0, Point p1) value) Parameters value (Point p0, Point p1) Returns LinearBezier implicit operator CubicBezier(LinearBezier) Implicitly converts this LinearBezier to a CubicBezier curve. Intermediate control points are interpolated at 1/3 and 2/3 for smooth spacing. public static implicit operator CubicBezier(LinearBezier linear) Parameters linear LinearBezier Returns CubicBezier implicit operator QuadraticBezier(LinearBezier) Implicitly converts this LinearBezier to a QuadraticBezier curve. The intermediate point is set to the midpoint for visual smoothness. public static implicit operator QuadraticBezier(LinearBezier linear) Parameters linear LinearBezier Returns QuadraticBezier implicit operator LinearBezier(LinearSpline) Implicitly converts a LinearSpline to a LinearBezier. public static implicit operator LinearBezier(LinearSpline spline) Parameters spline LinearSpline Returns LinearBezier"
  },
  "api/Xui.Core.Curves2D.LinearSpline.html": {
    "href": "api/Xui.Core.Curves2D.LinearSpline.html",
    "title": "Struct LinearSpline | XUI APPS",
    "summary": "Struct LinearSpline Namespace Xui.Core.Curves2D Assembly Core.dll Represents a linear spline segment between two points. public readonly struct LinearSpline : ICurve Implements ICurve Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks A linear spline defines a straight-line interpolation between P0 and P1. It is the simplest form of spline, useful for polyline paths, control handles, and degenerate Bézier cases. Constructors LinearSpline(Point, Point) Initializes a new LinearSpline segment between two points. public LinearSpline(Point p0, Point p1) Parameters p0 Point The starting point of the spline. p1 Point The ending point of the spline. Fields P0 The starting point of the line segment. public readonly Point P0 Field Value Point P1 The ending point of the line segment. public readonly Point P1 Field Value Point Properties this[NFloat] Evaluates the point on the spline at the specified parameter. public Point this[NFloat t] { get; } Parameters t NFloat Property Value Point Methods Length() Returns the length of the segment. public NFloat Length() Returns NFloat Length(NFloat) Returns the length of the segment. Precision is ignored for linear splines. public NFloat Length(NFloat precision) Parameters precision NFloat Returns NFloat Lerp(NFloat) Interpolates a point on the segment at the specified parameter. public Point Lerp(NFloat t) Parameters t NFloat A normalized parameter in the range [0, 1]. Returns Point The interpolated point on the line. Tangent(NFloat) Gets the constant tangent vector of the line segment. public Vector Tangent(NFloat t) Parameters t NFloat A normalized parameter (unused, since the tangent is constant). Returns Vector Operators implicit operator LinearBezier(LinearSpline) Converts this linear spline to a LinearBezier. public static implicit operator LinearBezier(LinearSpline s) Parameters s LinearSpline Returns LinearBezier"
  },
  "api/Xui.Core.Curves2D.QuadraticBezier.html": {
    "href": "api/Xui.Core.Curves2D.QuadraticBezier.html",
    "title": "Struct QuadraticBezier | XUI APPS",
    "summary": "Struct QuadraticBezier Namespace Xui.Core.Curves2D Assembly Core.dll Represents a quadratic Bézier curve defined by three control points. public readonly struct QuadraticBezier : ICurve Implements ICurve Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks A quadratic Bézier curve smoothly interpolates between P0 and P2. The curve is influenced by a single control point P1. Quadratic Béziers are widely used in vector graphics, font rendering, and easing functions. Constructors QuadraticBezier(Point, Point, Point) Initializes a new quadratic Bézier curve with the specified control points. public QuadraticBezier(Point p0, Point p1, Point p2) Parameters p0 Point p1 Point p2 Point Fields P0 The starting point of the curve. public readonly Point P0 Field Value Point P1 The control point that influences the curvature of the segment. public readonly Point P1 Field Value Point P2 The ending point of the curve. public readonly Point P2 Field Value Point Properties this[NFloat] Evaluates the point on the curve at the specified parameter. public Point this[NFloat t] { get; } Parameters t NFloat Property Value Point Methods ClosestT(Point) Finds the t value where the curve is closest to target. Uses uniform sampling across 16 points. public NFloat ClosestT(Point target) Parameters target Point Returns NFloat ClosestT(Point, NFloat) Finds the t value where the curve is closest to target. Uses recursive ternary subdivision with the specified precision. public NFloat ClosestT(Point target, NFloat precision) Parameters target Point precision NFloat Returns NFloat Drag(NFloat, Vector) Adjusts the control point to drag the curve at t by the given delta. Keeps P0 and P2 fixed. public QuadraticBezier Drag(NFloat t, Vector delta) Parameters t NFloat delta Vector Returns QuadraticBezier DragAt(Point, Vector) Adjusts the control point so that the curve is moved near origin by delta. Uses coarse sampling to find the closest point. public QuadraticBezier DragAt(Point origin, Vector delta) Parameters origin Point delta Vector Returns QuadraticBezier DragAt(Point, Vector, NFloat) Adjusts the control point so that the curve is moved near origin by delta. Uses adaptive precision to locate the closest point. public QuadraticBezier DragAt(Point origin, Vector delta, NFloat precision) Parameters origin Point delta Vector precision NFloat Returns QuadraticBezier Length() Approximates the arc length using uniform sampling over 16 segments. public NFloat Length() Returns NFloat The approximate total length of the curve. Length(NFloat) Approximates the arc length using recursive adaptive subdivision. public NFloat Length(NFloat precision) Parameters precision NFloat The maximum allowed error for curve flatness. Returns NFloat Lerp(NFloat) Evaluates the curve at parameter t using De Casteljau’s algorithm. public Point Lerp(NFloat t) Parameters t NFloat A normalized parameter in the range [0, 1]. Returns Point The interpolated point on the curve. Tangent(NFloat) Computes the tangent vector at parameter t. public Vector Tangent(NFloat t) Parameters t NFloat A normalized parameter in the range [0, 1]. Returns Vector The tangent vector at the specified point. Operators implicit operator QuadraticBezier((Point p0, Point p1, Point p2)) Converts a tuple of 3 points to a QuadraticBezier. public static implicit operator QuadraticBezier((Point p0, Point p1, Point p2) value) Parameters value (Point p0, Point p1, Point p2) Returns QuadraticBezier implicit operator QuadraticBezier(QuadraticSpline) Converts a QuadraticSpline to a QuadraticBezier. public static implicit operator QuadraticBezier(QuadraticSpline spline) Parameters spline QuadraticSpline Returns QuadraticBezier"
  },
  "api/Xui.Core.Curves2D.QuadraticSpline.html": {
    "href": "api/Xui.Core.Curves2D.QuadraticSpline.html",
    "title": "Struct QuadraticSpline | XUI APPS",
    "summary": "Struct QuadraticSpline Namespace Xui.Core.Curves2D Assembly Core.dll Represents a 3-point quadratic spline segment (parabolic arc) defined by a start point, control point, and end point. public readonly struct QuadraticSpline : ICurve Implements ICurve Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This spline uses the De Casteljau algorithm for interpolation and arc length approximation. The curve passes through P0 and P2, with P1 acting as the control point that defines curvature. Constructors QuadraticSpline(Point, Point, Point) Initializes a new QuadraticSpline with the given start, control, and end points. public QuadraticSpline(Point p0, Point p1, Point p2) Parameters p0 Point p1 Point p2 Point Fields P0 The start point of the spline. public readonly Point P0 Field Value Point P1 The control point that defines the curvature of the arc. public readonly Point P1 Field Value Point P2 The end point of the spline. public readonly Point P2 Field Value Point Properties this[NFloat] Evaluates the point on the spline at parameter t. public Point this[NFloat t] { get; } Parameters t NFloat Property Value Point Methods Length() Approximates the total arc length of the spline using a fixed 16-sample De Casteljau subdivision. public NFloat Length() Returns NFloat Length(NFloat) Approximates the arc length with adaptive subdivision using the specified precision tolerance. public NFloat Length(NFloat precision) Parameters precision NFloat The maximum allowed error in the approximation. Returns NFloat Lerp(NFloat) Computes the point on the spline at parameter t using De Casteljau interpolation. public Point Lerp(NFloat t) Parameters t NFloat A normalized parameter between 0 and 1. Returns Point Tangent(NFloat) Computes the tangent vector at parameter t on the spline. public Vector Tangent(NFloat t) Parameters t NFloat A normalized parameter between 0 and 1. Returns Vector Operators implicit operator QuadraticBezier(QuadraticSpline) Converts this spline to a QuadraticBezier curve with the same control points. public static implicit operator QuadraticBezier(QuadraticSpline s) Parameters s QuadraticSpline Returns QuadraticBezier"
  },
  "api/Xui.Core.Curves2D.Spline.html": {
    "href": "api/Xui.Core.Curves2D.Spline.html",
    "title": "Class Spline | XUI APPS",
    "summary": "Class Spline Namespace Xui.Core.Curves2D Assembly Core.dll Provides factory methods for creating spline segments of various degrees. public static class Spline Inheritance object Spline Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Cubic(Point, Point, Point, Point) Creates a cubic spline (degree 3) using Catmull–Rom interpolation through P1 and P2. public static CubicSpline Cubic(Point p0, Point p1, Point p2, Point p3) Parameters p0 Point p1 Point p2 Point p3 Point Returns CubicSpline Remarks This produces a smooth segment influenced by surrounding control points p0 and p3. Linear(Point, Point) Creates a linear spline (degree 1) between two points. public static LinearSpline Linear(Point p0, Point p1) Parameters p0 Point p1 Point Returns LinearSpline Quadratic(Point, Point, Point) Creates a quadratic spline (degree 2) between three points. public static QuadraticSpline Quadratic(Point p0, Point p1, Point p2) Parameters p0 Point p1 Point p2 Point Returns QuadraticSpline"
  },
  "api/Xui.Core.Curves2D.html": {
    "href": "api/Xui.Core.Curves2D.html",
    "title": "Namespace Xui.Core.Curves2D | XUI APPS",
    "summary": "Namespace Xui.Core.Curves2D Classes Bezier Static helper methods for constructing Bézier curves. Spline Provides factory methods for creating spline segments of various degrees. Structs CubicBezier Represents a cubic Bézier curve defined by four control points. CubicSpline Represents a 4-point spline segment using Catmull–Rom interpolation. The curve interpolates smoothly between P1 and P2. LinearBezier Represents a linear Bézier curve, equivalent to a straight line between two points. LinearSpline Represents a linear spline segment between two points. QuadraticBezier Represents a quadratic Bézier curve defined by three control points. QuadraticSpline Represents a 3-point quadratic spline segment (parabolic arc) defined by a start point, control point, and end point. Interfaces ICurve Represents a common interface for evaluable 2D curves."
  },
  "api/Xui.Core.Math2D.AffineTransform.html": {
    "href": "api/Xui.Core.Math2D.AffineTransform.html",
    "title": "Struct AffineTransform | XUI APPS",
    "summary": "Struct AffineTransform Namespace Xui.Core.Math2D Assembly Core.dll Represents a 2D affine transformation matrix in the form: | A C Tx | | B D Ty | | 0 0 1 | Used for rotating, scaling, translating, and skewing 2D vectors or points. public struct AffineTransform Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks Transformation is applied as: | x' | | A C Tx | | x | | y' | = | B D Ty | * | y | | 1 | | 0 0 1 | | 1 | Constructors AffineTransform(NFloat, NFloat, NFloat, NFloat, NFloat, NFloat) Constructs an affine transform with the specified matrix coefficients. public AffineTransform(NFloat a, NFloat b, NFloat c, NFloat d, NFloat tx, NFloat ty) Parameters a NFloat b NFloat c NFloat d NFloat tx NFloat ty NFloat Fields A The matrix component in the first row, first column (scale X / rotate). public NFloat A Field Value NFloat B The matrix component in the second row, first column (shear Y / rotate). public NFloat B Field Value NFloat C The matrix component in the first row, second column (shear X / rotate). public NFloat C Field Value NFloat D The matrix component in the second row, second column (scale Y / rotate). public NFloat D Field Value NFloat Identity The identity transform (no scale, rotation, or translation). public static readonly AffineTransform Identity Field Value AffineTransform Tx The translation component along the X axis. public NFloat Tx Field Value NFloat Ty The translation component along the Y axis. public NFloat Ty Field Value NFloat Properties Determinant Returns the determinant of the 2×2 linear portion of the matrix. public NFloat Determinant { get; } Property Value NFloat Remarks This value determines if the matrix is invertible. A value of 0 means the matrix cannot be inverted. Inverse Returns the inverse of this affine transform. public AffineTransform Inverse { get; } Property Value AffineTransform Remarks This operation assumes the transform is invertible. Division by a zero determinant will cause a runtime exception. Methods Rotate(NFloat) Creates a rotation transform around the origin using the given angle in radians. public static AffineTransform Rotate(NFloat angle) Parameters angle NFloat Returns AffineTransform Scale(Vector) Creates a scaling transform using the specified scale vector. public static AffineTransform Scale(Vector v) Parameters v Vector Returns AffineTransform Shear(NFloat, NFloat) Creates a shear (skew) transformation along the X and Y axes. public static AffineTransform Shear(NFloat shearX, NFloat shearY) Parameters shearX NFloat The shear factor in the X direction. shearY NFloat The shear factor in the Y direction. Returns AffineTransform ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Translate(Vector) Creates a translation transform using the specified offset vector. public static AffineTransform Translate(Vector v) Parameters v Vector Returns AffineTransform Operators operator *(AffineTransform, AffineTransform) Composes two affine transforms using matrix multiplication. public static AffineTransform operator *(AffineTransform lhs, AffineTransform rhs) Parameters lhs AffineTransform rhs AffineTransform Returns AffineTransform A new transform representing the application of rhs followed by lhs. operator *(AffineTransform, Point) Applies this transform to a Point, including translation. public static Point operator *(AffineTransform t, Point p) Parameters t AffineTransform The affine transform. p Point The point to transform. Returns Point A new Point with the transform applied. Remarks This operation applies the full affine matrix, including scale, rotation, shear, and translation. Use this when transforming coordinates in space (e.g., an element's position). operator *(AffineTransform, Vector) Applies only the linear portion (scale, rotation, shear) of this transform to a Vector. public static Vector operator *(AffineTransform t, Vector v) Parameters t AffineTransform The affine transform. v Vector The vector to transform. Returns Vector A new Vector with the linear transform applied. Remarks Translation is not applied. Use this to transform directions, movement deltas, or normals."
  },
  "api/Xui.Core.Math2D.Frame.html": {
    "href": "api/Xui.Core.Math2D.Frame.html",
    "title": "Struct Frame | XUI APPS",
    "summary": "Struct Frame Namespace Xui.Core.Math2D Assembly Core.dll Represents thickness values for each edge of a rectangular element. public struct Frame Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks A Frame defines spacing from the left, top, right, and bottom edges. It is typically used for layout constructs such as Margin, Padding, or BorderWidth. Unlike Rect, it does not represent position or size—only edge offsets. Constructors Frame() Initializes a new Frame with all edges set to zero. public Frame() Frame(NFloat, NFloat, NFloat, NFloat) Initializes a new Frame with the specified edge thicknesses. public Frame(NFloat top, NFloat right, NFloat bottom, NFloat left) Parameters top NFloat Top edge thickness. right NFloat Right edge thickness. bottom NFloat Bottom edge thickness. left NFloat Left edge thickness. Fields Bottom The thickness of the bottom edge. public NFloat Bottom Field Value NFloat Left The thickness of the left edge. public NFloat Left Field Value NFloat Right The thickness of the right edge. public NFloat Right Field Value NFloat Top The thickness of the top edge. public NFloat Top Field Value NFloat Zero A frame with all edge values set to zero. public static readonly Frame Zero Field Value Frame Properties IsUniform Returns true if all four edges have equal thickness. public bool IsUniform { get; } Property Value bool TotalHeight Gets the total vertical edge thickness (top + bottom). public NFloat TotalHeight { get; } Property Value NFloat TotalWidth Gets the total horizontal edge thickness (left + right). public NFloat TotalWidth { get; } Property Value NFloat Methods Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Max(Frame, Frame) Returns a frame containing the maximum value for each edge from two frames. public static Frame Max(Frame lhs, Frame rhs) Parameters lhs Frame rhs Frame Returns Frame Min(Frame, Frame) Returns a frame containing the minimum value for each edge from two frames. public static Frame Min(Frame lhs, Frame rhs) Parameters lhs Frame rhs Frame Returns Frame ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator +(Frame, Frame) Adds the corresponding edge thicknesses of two frames. public static Frame operator +(Frame lhs, Frame rhs) Parameters lhs Frame rhs Frame Returns Frame operator ==(Frame, Frame) Returns true if all edge values match exactly. public static bool operator ==(Frame left, Frame right) Parameters left Frame right Frame Returns bool implicit operator Frame(double) Implicitly converts a double to a Frame, applying the same value to all four sides (Left, Top, Right, Bottom). public static implicit operator Frame(double value) Parameters value double The double value to apply uniformly to all sides. Returns Frame A Frame with all sides set to value. implicit operator Frame(int) Implicitly converts an int to a Frame, applying the same value to all four sides (Left, Top, Right, Bottom). public static implicit operator Frame(int value) Parameters value int The integer value to apply uniformly to all sides. Returns Frame A Frame with all sides set to value. implicit operator Frame(NFloat) Converts a scalar value into a uniform Frame for all sides. public static implicit operator Frame(NFloat value) Parameters value NFloat Returns Frame implicit operator Frame(float) Implicitly converts a float to a Frame, applying the same value to all four sides (Left, Top, Right, Bottom). public static implicit operator Frame(float value) Parameters value float The float value to apply uniformly to all sides. Returns Frame A Frame with all sides set to value. implicit operator Frame((NFloat top, NFloat right, NFloat bottom, NFloat left)) Converts a 4-tuple (top, right, bottom, left) to a Frame. public static implicit operator Frame((NFloat top, NFloat right, NFloat bottom, NFloat left) value) Parameters value (NFloat top, NFloat right, NFloat bottom, NFloat left) Returns Frame implicit operator Frame((NFloat horizontal, NFloat vertical)) Converts a 2-tuple (horizontal, vertical) to a Frame. Horizontal is applied to left and right; vertical to top and bottom. public static implicit operator Frame((NFloat horizontal, NFloat vertical) value) Parameters value (NFloat horizontal, NFloat vertical) Returns Frame operator !=(Frame, Frame) Returns true if any edge value differs. public static bool operator !=(Frame lhs, Frame rhs) Parameters lhs Frame rhs Frame Returns bool operator *(Frame, NFloat) Scales all edges of the frame by the specified scalar. public static Frame operator *(Frame lhs, NFloat rhs) Parameters lhs Frame rhs NFloat Returns Frame operator -(Frame, Frame) Subtracts the corresponding edge thicknesses of two frames. public static Frame operator -(Frame lhs, Frame rhs) Parameters lhs Frame rhs Frame Returns Frame"
  },
  "api/Xui.Core.Math2D.Point.html": {
    "href": "api/Xui.Core.Math2D.Point.html",
    "title": "Struct Point | XUI APPS",
    "summary": "Struct Point Namespace Xui.Core.Math2D Assembly Core.dll Represents a point in 2D space, defined by its X and Y coordinates. public struct Point Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Point(NFloat, NFloat) Initializes a new point with the specified coordinates. public Point(NFloat x, NFloat y) Parameters x NFloat y NFloat Fields One A point at (1, 1), useful for normalized coordinates or vector math. public static readonly Point One Field Value Point X The X-coordinate of the point. public NFloat X Field Value NFloat Y The Y-coordinate of the point. public NFloat Y Field Value NFloat Zero A point at the origin (0, 0). public static readonly Point Zero Field Value Point Methods Distance(Point, Point) Returns the Euclidean distance between two points. public static NFloat Distance(Point a, Point b) Parameters a Point b Point Returns NFloat Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(Point) Returns true if this point has the same coordinates as another. public bool Equals(Point other) Parameters other Point Returns bool GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Point, Point, NFloat) Linearly interpolates between two points by step. public static Point Lerp(Point start, Point end, NFloat step) Parameters start Point The start point. end Point The end point. step NFloat A value from 0 to 1 indicating the interpolation position. Returns Point SquaredDistance(Point, Point) Returns the squared Euclidean distance between two points (no square root). Useful for performance comparisons or ordering by proximity. public static NFloat SquaredDistance(Point a, Point b) Parameters a Point b Point Returns NFloat TaxicabDistance(Point, Point) Returns the Manhattan (taxicab) distance between two points. public static NFloat TaxicabDistance(Point a, Point b) Parameters a Point b Point Returns NFloat Remarks The sum of the absolute horizontal and vertical distances. Often used in grid-based or discrete movement systems. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator +(Point, Vector) Offsets a point by a vector. public static Point operator +(Point lhs, Vector rhs) Parameters lhs Point rhs Vector Returns Point operator ==(Point, Point) Determines whether two points have equal coordinates. public static bool operator ==(Point lhs, Point rhs) Parameters lhs Point rhs Point Returns bool explicit operator Point(Vector) Explicitly converts a vector to a point (drops directional semantics). public static explicit operator Point(Vector vector) Parameters vector Vector Returns Point implicit operator Point((NFloat, NFloat)) Converts a tuple to a point. public static implicit operator Point((NFloat, NFloat) tuple) Parameters tuple (NFloat horizontal, NFloat vertical) Returns Point operator !=(Point, Point) Determines whether two points differ in any coordinate. public static bool operator !=(Point lhs, Point rhs) Parameters lhs Point rhs Point Returns bool operator -(Point, Point) Returns the vector difference from one point to another. public static Vector operator -(Point lhs, Point rhs) Parameters lhs Point rhs Point Returns Vector operator -(Point, Vector) Subtracts a vector from a point, offsetting it in the opposite direction. public static Point operator -(Point lhs, Vector rhs) Parameters lhs Point rhs Vector Returns Point"
  },
  "api/Xui.Core.Math2D.Rect.html": {
    "href": "api/Xui.Core.Math2D.Rect.html",
    "title": "Struct Rect | XUI APPS",
    "summary": "Struct Rect Namespace Xui.Core.Math2D Assembly Core.dll Represents a rectangle in 2D space, defined by its origin (X, Y) and its dimensions (Width, Height). public struct Rect : INonEnumerableSet<Point> Implements INonEnumerableSet<Point> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks Unlike Frame, which represents edge thicknesses around a box, Rect defines a positioned, sized area used for layout and rendering. Constructors Rect(NFloat, NFloat, NFloat, NFloat) Creates a new Rect from position and size. public Rect(NFloat x, NFloat y, NFloat width, NFloat height) Parameters x NFloat y NFloat width NFloat height NFloat Rect(Point, Size) Creates a new Rect from a top-left point and a size. public Rect(Point topLeft, Size size) Parameters topLeft Point size Size Rect(Vector, Size) Creates a new Rect from a top-left vector and a size. public Rect(Vector topLeft, Size size) Parameters topLeft Vector size Size Fields Height The height of the rectangle. public NFloat Height Field Value NFloat Width The width of the rectangle. public NFloat Width Field Value NFloat X The X-coordinate of the rectangle’s top-left corner. public NFloat X Field Value NFloat Y The Y-coordinate of the rectangle’s top-left corner. public NFloat Y Field Value NFloat Properties Bottom Returns the Y-coordinate of the bottom edge. public NFloat Bottom { get; } Property Value NFloat BottomLeft Returns the bottom-left point of the rectangle. public Point BottomLeft { get; } Property Value Point BottomRight Returns the bottom-right point of the rectangle. public Point BottomRight { get; } Property Value Point Center Returns the center point of the rectangle. public Point Center { get; } Property Value Point Left Returns the X-coordinate of the left edge. public NFloat Left { get; } Property Value NFloat Right Returns the X-coordinate of the right edge. public NFloat Right { get; } Property Value NFloat Size Gets or sets the size of the rectangle. public Size Size { get; set; } Property Value Size Top Returns the Y-coordinate of the top edge. public NFloat Top { get; } Property Value NFloat TopCenter Returns the top-center point of the rectangle. public Point TopCenter { get; } Property Value Point TopLeft Returns the top-left point of the rectangle. public Point TopLeft { get; } Property Value Point TopRight Returns the top-right point of the rectangle. public Point TopRight { get; } Property Value Point Methods Contains(Point) Returns true if the specified point lies within this rectangle. public bool Contains(Point point) Parameters point Point Returns bool Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(Rect) Returns true if this rectangle is equal to another rectangle in position and size. public bool Equals(Rect other) Parameters other Rect Returns bool Expand(NFloat) Returns a rectangle expanded uniformly in all directions. public Rect Expand(NFloat expand) Parameters expand NFloat Returns Rect Expand(NFloat, NFloat) Returns a rectangle expanded horizontally and vertically by the specified amounts. public Rect Expand(NFloat h, NFloat v) Parameters h NFloat v NFloat Returns Rect GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Inset(NFloat) Returns a new rectangle that is inset by the same amount on all four sides. public Rect Inset(NFloat inset) Parameters inset NFloat Returns Rect ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator +(Rect, Frame) Returns a rectangle expanded outward by a Frame. public static Rect operator +(Rect rect, Frame frame) Parameters rect Rect frame Frame Returns Rect operator ==(Rect, Rect) Returns true if two rectangles are equal in position and size. public static bool operator ==(Rect lhs, Rect rhs) Parameters lhs Rect rhs Rect Returns bool implicit operator Rect((NFloat, NFloat, NFloat, NFloat)) Implicit conversion from a 4-tuple to a rectangle. public static implicit operator Rect((NFloat, NFloat, NFloat, NFloat) tuple) Parameters tuple (NFloat top, NFloat right, NFloat bottom, NFloat left) Returns Rect operator !=(Rect, Rect) Returns true if any of the rectangle fields are different. public static bool operator !=(Rect lhs, Rect rhs) Parameters lhs Rect rhs Rect Returns bool operator -(Rect, Frame) Returns a rectangle inset inward by a Frame. public static Rect operator -(Rect rect, Frame frame) Parameters rect Rect frame Frame Returns Rect"
  },
  "api/Xui.Core.Math2D.Size.html": {
    "href": "api/Xui.Core.Math2D.Size.html",
    "title": "Struct Size | XUI APPS",
    "summary": "Struct Size Namespace Xui.Core.Math2D Assembly Core.dll Represents a two-dimensional size with Width and Height components. public struct Size Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks A Size specifies how much space an element occupies, without defining its position. It is commonly used in layout systems to describe constraints or measured results. Constructors Size() Initializes a new instance of the Size struct with zero dimensions. public Size() Size(NFloat, NFloat) Initializes a new instance of the Size struct with the given width and height. public Size(NFloat width, NFloat height) Parameters width NFloat The width of the size. height NFloat The height of the size. Fields Empty A size with zero width and height. public static readonly Size Empty Field Value Size Height The height of the element. public NFloat Height Field Value NFloat Infinity A size with infinite width and height. public static readonly Size Infinity Field Value Size Width The width of the element. public NFloat Width Field Value NFloat Methods Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(Size) Returns true if this size is equal to the specified other. public bool Equals(Size other) Parameters other Size Returns bool GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Max(Size, Size) Returns the maximum of two sizes, using the larger width and height from each. public static Size Max(Size lhs, Size rhs) Parameters lhs Size rhs Size Returns Size Min(Size, Size) Returns the minimum of two sizes, using the smaller width and height from each. public static Size Min(Size lhs, Size rhs) Parameters lhs Size rhs Size Returns Size ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator +(Size, Frame) Adds edge spacing from a Frame to a Size, increasing its dimensions. public static Size operator +(Size size, Frame frame) Parameters size Size frame Frame Returns Size operator +(Size, Size) Adds two sizes together component-wise. public static Size operator +(Size lhs, Size rhs) Parameters lhs Size rhs Size Returns Size operator ==(Size, Size) Returns true if the two sizes have the same dimensions. public static bool operator ==(Size lhs, Size rhs) Parameters lhs Size rhs Size Returns bool explicit operator Size(Vector) Explicitly converts a Vector to a Size. public static explicit operator Size(Vector vector) Parameters vector Vector Returns Size implicit operator Size((NFloat, NFloat)) Implicitly converts a tuple to a Size. public static implicit operator Size((NFloat, NFloat) tuple) Parameters tuple (NFloat horizontal, NFloat vertical) Returns Size operator !=(Size, Size) Returns true if the two sizes have different dimensions. public static bool operator !=(Size lhs, Size rhs) Parameters lhs Size rhs Size Returns bool operator -(Size, Frame) Subtracts edge spacing from a Size, reducing its dimensions. public static Size operator -(Size size, Frame frame) Parameters size Size frame Frame Returns Size"
  },
  "api/Xui.Core.Math2D.Vector.html": {
    "href": "api/Xui.Core.Math2D.Vector.html",
    "title": "Struct Vector | XUI APPS",
    "summary": "Struct Vector Namespace Xui.Core.Math2D Assembly Core.dll Represents a 2D vector with X and Y components, commonly used for geometric operations, layout math, and movement in 2D space. public struct Vector Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vector(NFloat, NFloat) Initializes a new instance of the Vector struct with the specified X and Y components. public Vector(NFloat x, NFloat y) Parameters x NFloat The horizontal component of the vector. y NFloat The vertical component of the vector. Fields Down A unit vector pointing down (0, 1). public static readonly Vector Down Field Value Vector Left A unit vector pointing left (-1, 0). public static readonly Vector Left Field Value Vector One A unit vector (1, 1). public static readonly Vector One Field Value Vector Right A unit vector pointing right (1, 0). public static readonly Vector Right Field Value Vector Up A unit vector pointing up (0, -1). public static readonly Vector Up Field Value Vector X The horizontal component of the vector. public NFloat X Field Value NFloat Y The vertical component of the vector. public NFloat Y Field Value NFloat Zero A zero vector (0, 0). public static readonly Vector Zero Field Value Vector Properties Magnitude Returns the magnitude (length) of the vector. public NFloat Magnitude { get; } Property Value NFloat Normalized Returns a normalized (unit length) version of this vector. public Vector Normalized { get; } Property Value Vector Methods Angle(NFloat) Returns a unit vector rotated clockwise from the upward direction (0, 1) by the given angle (in radians). public static Vector Angle(NFloat radians) Parameters radians NFloat Returns Vector Angle(Vector) Returns the clockwise angle (in radians) from the upward direction (0, 1) to the given vector. public static NFloat Angle(Vector v) Parameters v Vector Returns NFloat Angle(Vector, Vector) Returns the signed angle (in radians) from lhs to rhs, clockwise from upward. public static NFloat Angle(Vector lhs, Vector rhs) Parameters lhs Vector rhs Vector Returns NFloat Clamp(NFloat) Returns a new vector with its magnitude limited to the specified maximum. public Vector Clamp(NFloat max) Parameters max NFloat Returns Vector Cross(Vector, Vector) Returns the 2D cross product (scalar) of two vectors. public static NFloat Cross(Vector lhs, Vector rhs) Parameters lhs Vector rhs Vector Returns NFloat Dot(Vector, Vector) Returns the dot product of two vectors. public static NFloat Dot(Vector lhs, Vector rhs) Parameters lhs Vector rhs Vector Returns NFloat Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(Vector) Returns true if this vector is equal to another vector. public bool Equals(Vector other) Parameters other Vector Returns bool GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Vector, Vector, NFloat) Linearly interpolates between two vectors by step. public static Vector Lerp(Vector start, Vector end, NFloat step) Parameters start Vector end Vector step NFloat Returns Vector Project(Vector, Vector) Projects lhs onto rhs. public static Vector Project(Vector lhs, Vector rhs) Parameters lhs Vector rhs Vector Returns Vector Rotate(NFloat) Rotates the vector counterclockwise by the given angle (in degrees). public Vector Rotate(NFloat degrees) Parameters degrees NFloat Returns Vector ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator +(Vector, Vector) Adds two vectors. public static Vector operator +(Vector lhs, Vector rhs) Parameters lhs Vector rhs Vector Returns Vector operator /(Vector, NFloat) Divides a vector by a scalar. public static Vector operator /(Vector v, NFloat f) Parameters v Vector f NFloat Returns Vector operator ==(Vector, Vector) Returns true if the two vectors have equal components. public static bool operator ==(Vector lhs, Vector rhs) Parameters lhs Vector rhs Vector Returns bool implicit operator Vector((NFloat, NFloat)) Implicitly converts a tuple to a Vector. public static implicit operator Vector((NFloat, NFloat) tuple) Parameters tuple (NFloat horizontal, NFloat vertical) Returns Vector implicit operator Vector(Point) Implicitly converts a Point to a Vector. public static implicit operator Vector(Point point) Parameters point Point Returns Vector operator !=(Vector, Vector) Returns true if any component of the two vectors is different. public static bool operator !=(Vector lhs, Vector rhs) Parameters lhs Vector rhs Vector Returns bool operator *(NFloat, Vector) Multiplies a scalar by a vector. public static Vector operator *(NFloat f, Vector v) Parameters f NFloat v Vector Returns Vector operator *(Vector, NFloat) Multiplies a vector by a scalar. public static Vector operator *(Vector v, NFloat f) Parameters v Vector f NFloat Returns Vector operator -(Vector, Vector) Subtracts one vector from another. public static Vector operator -(Vector lhs, Vector rhs) Parameters lhs Vector rhs Vector Returns Vector"
  },
  "api/Xui.Core.Math2D.html": {
    "href": "api/Xui.Core.Math2D.html",
    "title": "Namespace Xui.Core.Math2D | XUI APPS",
    "summary": "Namespace Xui.Core.Math2D Structs AffineTransform Represents a 2D affine transformation matrix in the form: | A C Tx | | B D Ty | | 0 0 1 | Used for rotating, scaling, translating, and skewing 2D vectors or points. Frame Represents thickness values for each edge of a rectangular element. Point Represents a point in 2D space, defined by its X and Y coordinates. Rect Represents a rectangle in 2D space, defined by its origin (X, Y) and its dimensions (Width, Height). Size Represents a two-dimensional size with Width and Height components. Vector Represents a 2D vector with X and Y components, commonly used for geometric operations, layout math, and movement in 2D space."
  },
  "api/Xui.Core.Set.EmptySet-1.html": {
    "href": "api/Xui.Core.Set.EmptySet-1.html",
    "title": "Class EmptySet<T> | XUI APPS",
    "summary": "Class EmptySet<T> Namespace Xui.Core.Set Assembly Core.dll Represents an empty set — a set that contains no elements. public sealed class EmptySet<T> : INonEnumerableSet<T> Type Parameters T The type of elements the set could (but does not) contain. Inheritance object EmptySet<T> Implements INonEnumerableSet<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks This type always returns false from Contains(T). It is a useful identity for set composition and for scenarios like default hit test areas or disabled regions. Fields Instance A shared singleton instance of the empty set. public static readonly EmptySet<T> Instance Field Value EmptySet<T> Methods Contains(T) Always returns false, since no element belongs to the empty set. public bool Contains(T obj) Parameters obj T The object to test. Returns bool false for all inputs."
  },
  "api/Xui.Core.Set.INonEnumerableSet-1.html": {
    "href": "api/Xui.Core.Set.INonEnumerableSet-1.html",
    "title": "Interface INonEnumerableSet<T> | XUI APPS",
    "summary": "Interface INonEnumerableSet<T> Namespace Xui.Core.Set Assembly Core.dll Represents a mathematical set as defined by its membership test: whether an element belongs to the set. public interface INonEnumerableSet<T> Type Parameters T The type of elements being tested for membership. Remarks This interface does not imply enumeration, mutation, or collection semantics. It aligns with the pure set-theoretic notion where a set is characterized solely by the ability to determine if a value is a member of the set (i.e., x ∈ S). Methods Contains(T) Determines whether the specified element is a member of this set. bool Contains(T obj) Parameters obj T The element to test for membership. Returns bool true if the element belongs to the set; otherwise, false."
  },
  "api/Xui.Core.Set.html": {
    "href": "api/Xui.Core.Set.html",
    "title": "Namespace Xui.Core.Set | XUI APPS",
    "summary": "Namespace Xui.Core.Set Classes EmptySet<T> Represents an empty set — a set that contains no elements. Interfaces INonEnumerableSet<T> Represents a mathematical set as defined by its membership test: whether an element belongs to the set."
  },
  "api/Xui.Core.UI.Direction.html": {
    "href": "api/Xui.Core.UI.Direction.html",
    "title": "Enum Direction | XUI APPS",
    "summary": "Enum Direction Namespace Xui.Core.UI Assembly Core.dll Indicates the semantic inline direction of content, such as left-to-right or right-to-left. Used to resolve text alignment, layout flow, and mirroring behavior. public enum Direction : byte Fields Inherit = 0 Inherit direction from the parent view. LeftToRight = 1 Left-to-right flow (default for Western languages). RightToLeft = 2 Right-to-left flow (used in Arabic, Hebrew, etc)."
  },
  "api/Xui.Core.UI.Flow.html": {
    "href": "api/Xui.Core.UI.Flow.html",
    "title": "Enum Flow | XUI APPS",
    "summary": "Enum Flow Namespace Xui.Core.UI Assembly Core.dll Controls whether layout and rendering should respect directionality and writing mode. Used to suppress mirroring and bidi-aware behavior for diagrams, graphs, and non-linguistic views. public enum Flow : byte Fields Aware = 1 Enable direction-aware and writing-mode-aware behavior. Inherit = 0 Inherit flow behavior from the parent view. Unaware = 2 Disable all direction-aware layout and rendering. Used for charts, maps, etc."
  },
  "api/Xui.Core.UI.FlowDirection.html": {
    "href": "api/Xui.Core.UI.FlowDirection.html",
    "title": "Enum FlowDirection | XUI APPS",
    "summary": "Enum FlowDirection Namespace Xui.Core.UI Assembly Core.dll Represents the resolved physical direction of layout flow along an axis. This is derived from WritingMode and Direction, and is used to control stacking, alignment, and layout flow along block or inline axes. public enum FlowDirection : byte Fields BottomToTop = 3 Content flows from bottom to top. LeftToRight = 0 Content flows from left to right. RightToLeft = 1 Content flows from right to left. TopToBottom = 2 Content flows from top to bottom."
  },
  "api/Xui.Core.UI.HorizontalAlignment.html": {
    "href": "api/Xui.Core.UI.HorizontalAlignment.html",
    "title": "Enum HorizontalAlignment | XUI APPS",
    "summary": "Enum HorizontalAlignment Namespace Xui.Core.UI Assembly Core.dll Specifies how a view should be aligned horizontally within its layout bounds. Used by parent containers during layout to position the view along the inline axis. public enum HorizontalAlignment : byte Fields Center = 2 Center horizontally within the available space. Left = 1 Align to the left edge (or start edge in LTR layouts). Right = 3 Align to the right edge (or start edge in RTL layouts). Stretch = 0 Stretch to fill the full available horizontal space."
  },
  "api/Xui.Core.UI.HorizontalStack.html": {
    "href": "api/Xui.Core.UI.HorizontalStack.html",
    "title": "Class HorizontalStack | XUI APPS",
    "summary": "Class HorizontalStack Namespace Xui.Core.UI Assembly Core.dll A layout container that arranges its children horizontally from left to right. Each child is measured with unconstrained width and a constrained height. The container expands to fit the combined width of all children. public class HorizontalStack : ViewCollection Inheritance object View ViewCollection HorizontalStack Inherited Members ViewCollection.children ViewCollection.Count ViewCollection.this[int] ViewCollection.Content ViewCollection.Add(View) ViewCollection.Remove(View) ViewCollection.RenderCore(IContext) ViewCollection.HitTest(Point) View.Parent View.Frame View.Margin View.HorizontalAlignment View.VerticalAlignment View.Direction View.WritingMode View.Flow View.MinimumWidth View.MinimumHeight View.MaximumWidth View.MaximumHeight View.Update(LayoutGuide) View.Measure(Size) View.Arrange(Rect) View.Render(IContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ArrangeCore(Rect) Performs the layout pass by arranging content and children within the view's border edge box, using the provided rectangle. protected override void ArrangeCore(Rect rect) Parameters rect Rect The final rectangle (position and size) allocated to this view's border edge box. MeasureCore(Size) Determines the minimum size that this view's border edge box requires, given the maximum available size. Margin is not part of this size. protected override Size MeasureCore(Size availableBorderEdgeSize) Parameters availableBorderEdgeSize Size The maximum size available for the view’s border edge box. This size excludes margins, which are handled by the parent layout. Returns Size The desired size of the border edge box based on content and layout logic."
  },
  "api/Xui.Core.UI.HorizontalUniformStack.html": {
    "href": "api/Xui.Core.UI.HorizontalUniformStack.html",
    "title": "Class HorizontalUniformStack | XUI APPS",
    "summary": "Class HorizontalUniformStack Namespace Xui.Core.UI Assembly Core.dll A layout container that arranges its children in a horizontal stack, assigning each child the same width. public class HorizontalUniformStack : ViewCollection Inheritance object View ViewCollection HorizontalUniformStack Inherited Members ViewCollection.children ViewCollection.Count ViewCollection.this[int] ViewCollection.Content ViewCollection.Add(View) ViewCollection.Remove(View) ViewCollection.RenderCore(IContext) ViewCollection.HitTest(Point) View.Parent View.Frame View.Margin View.HorizontalAlignment View.VerticalAlignment View.Direction View.WritingMode View.Flow View.MinimumWidth View.MinimumHeight View.MaximumWidth View.MaximumHeight View.Update(LayoutGuide) View.Measure(Size) View.Arrange(Rect) View.Render(IContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks If the parent provides a constrained width, the container divides the available width equally among all children. If the width is unconstrained (infinite), the container measures each child to determine the maximum width, and assigns that uniform width to all columns. The height of the container is based on the tallest child. Methods ArrangeCore(Rect) Arranges the children into horizontally stacked columns of equal width. protected override void ArrangeCore(Rect rect) Parameters rect Rect The rectangle within which to arrange children. MeasureCore(Size) Measures the desired size of this layout container and its children, based on the available space provided by the parent. protected override Size MeasureCore(Size availableBorderEdgeSize) Parameters availableBorderEdgeSize Size The space available for layout, excluding padding and borders. Returns Size The desired size of this container based on its layout strategy."
  },
  "api/Xui.Core.UI.LayoutGuide.Align.html": {
    "href": "api/Xui.Core.UI.LayoutGuide.Align.html",
    "title": "Enum LayoutGuide.Align | XUI APPS",
    "summary": "Enum LayoutGuide.Align Namespace Xui.Core.UI Assembly Core.dll Defines alignment of a view within a layout axis. public enum LayoutGuide.Align : byte Fields Center = 1 Align to the center. End = 2 Align to the end (bottom or right). Start = 0 Align to the start (top or left)."
  },
  "api/Xui.Core.UI.LayoutGuide.LayoutPass.html": {
    "href": "api/Xui.Core.UI.LayoutGuide.LayoutPass.html",
    "title": "Enum LayoutGuide.LayoutPass | XUI APPS",
    "summary": "Enum LayoutGuide.LayoutPass Namespace Xui.Core.UI Assembly Core.dll Flags indicating which type of layout pass is being performed. Multiple passes may be combined (e.g., Measure | Render). [Flags] public enum LayoutGuide.LayoutPass : byte Fields Arrange = 2 Indicates an Arrange pass to finalize layout position and size. Measure = 1 Indicates a Measure pass to determine desired size. Render = 4 Indicates a Render pass to draw the view's content."
  },
  "api/Xui.Core.UI.LayoutGuide.SizeTo.html": {
    "href": "api/Xui.Core.UI.LayoutGuide.SizeTo.html",
    "title": "Enum LayoutGuide.SizeTo | XUI APPS",
    "summary": "Enum LayoutGuide.SizeTo Namespace Xui.Core.UI Assembly Core.dll Defines how the view should interpret the size constraints during measurement. public enum LayoutGuide.SizeTo : byte Fields AtMost = 1 The view may size to its content, but must not exceed the given constraints. Exact = 0 The view must exactly match the given size constraints."
  },
  "api/Xui.Core.UI.LayoutGuide.html": {
    "href": "api/Xui.Core.UI.LayoutGuide.html",
    "title": "Struct LayoutGuide | XUI APPS",
    "summary": "Struct LayoutGuide Namespace Xui.Core.UI Assembly Core.dll Encapsulates the parameters and results of a layout pass (Measure, Arrange, Render) for a view. public struct LayoutGuide Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Anchor The anchor point that defines the alignment constraint for layout. This point serves as a reference for positioning the view based on alignment. For example, if alignment is set to End, the anchor represents the bottom-right constraint. If alignment is Start, it represents the top-left constraint. public Point Anchor Field Value Point ArrangedRect The final rectangle occupied by the view's border edge box after the Arrange pass. public Rect ArrangedRect Field Value Rect AvailableSize The available space for measuring this view's margin box. Used during the Measure pass. public Size AvailableSize Field Value Size DesiredSize The desired size of the view's margin box, produced during the Measure pass. public Size DesiredSize Field Value Size MeasureContext Optional context for measuring text content during the Measure pass. public ITextMeasureContext? MeasureContext Field Value ITextMeasureContext Pass Indicates the type of layout pass being performed: Measure, Arrange, or Render. public LayoutGuide.LayoutPass Pass Field Value LayoutGuide.LayoutPass RenderContext Optional rendering context for drawing during the Render pass. public IContext? RenderContext Field Value IContext XAlign The horizontal alignment of the view within its allocated space. public LayoutGuide.Align XAlign Field Value LayoutGuide.Align XSize How the view should size itself horizontally during measurement (exact or at-most). public LayoutGuide.SizeTo XSize Field Value LayoutGuide.SizeTo YAlign The vertical alignment of the view within its allocated space. public LayoutGuide.Align YAlign Field Value LayoutGuide.Align YSize How the view should size itself vertically during measurement (exact or at-most). public LayoutGuide.SizeTo YSize Field Value LayoutGuide.SizeTo Properties IsArrange Returns true if this guide represents an Arrange pass. public bool IsArrange { get; } Property Value bool IsMeasure Returns true if this guide represents a Measure pass. public bool IsMeasure { get; } Property Value bool IsRender Returns true if this guide represents a Render pass. public bool IsRender { get; } Property Value bool"
  },
  "api/Xui.Core.UI.VerticalAlignment.html": {
    "href": "api/Xui.Core.UI.VerticalAlignment.html",
    "title": "Enum VerticalAlignment | XUI APPS",
    "summary": "Enum VerticalAlignment Namespace Xui.Core.UI Assembly Core.dll Specifies how a view should be aligned vertically within its layout bounds. Used by parent containers to control vertical positioning along the block axis. public enum VerticalAlignment : byte Fields Bottom = 3 Align to the bottom edge (or start edge in bottom-up layouts). Middle = 2 Center vertically within the available space. Stretch = 0 Stretch to fill the full available vertical space. Top = 1 Align to the top edge (or start edge in top-down layouts)."
  },
  "api/Xui.Core.UI.VerticalStack.html": {
    "href": "api/Xui.Core.UI.VerticalStack.html",
    "title": "Class VerticalStack | XUI APPS",
    "summary": "Class VerticalStack Namespace Xui.Core.UI Assembly Core.dll A layout container that arranges its children vertically from top to bottom. Each child is measured with an unconstrained height and is allowed to take up as much vertical space as needed. The container expands to fit the combined height of all children. public class VerticalStack : ViewCollection Inheritance object View ViewCollection VerticalStack Inherited Members ViewCollection.children ViewCollection.Count ViewCollection.this[int] ViewCollection.Content ViewCollection.Add(View) ViewCollection.Remove(View) ViewCollection.RenderCore(IContext) ViewCollection.HitTest(Point) View.Parent View.Frame View.Margin View.HorizontalAlignment View.VerticalAlignment View.Direction View.WritingMode View.Flow View.MinimumWidth View.MinimumHeight View.MaximumWidth View.MaximumHeight View.Update(LayoutGuide) View.Measure(Size) View.Arrange(Rect) View.Render(IContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ArrangeCore(Rect) Performs the layout pass by arranging content and children within the view's border edge box, using the provided rectangle. protected override void ArrangeCore(Rect rect) Parameters rect Rect The final rectangle (position and size) allocated to this view's border edge box. MeasureCore(Size) Determines the minimum size that this view's border edge box requires, given the maximum available size. Margin is not part of this size. protected override Size MeasureCore(Size availableBorderEdgeSize) Parameters availableBorderEdgeSize Size The maximum size available for the view’s border edge box. This size excludes margins, which are handled by the parent layout. Returns Size The desired size of the border edge box based on content and layout logic."
  },
  "api/Xui.Core.UI.VerticalUniformStack.html": {
    "href": "api/Xui.Core.UI.VerticalUniformStack.html",
    "title": "Class VerticalUniformStack | XUI APPS",
    "summary": "Class VerticalUniformStack Namespace Xui.Core.UI Assembly Core.dll A layout container that arranges its children in a vertical stack, giving each child the same height. public class VerticalUniformStack : ViewCollection Inheritance object View ViewCollection VerticalUniformStack Inherited Members ViewCollection.children ViewCollection.Count ViewCollection.this[int] ViewCollection.Content ViewCollection.Add(View) ViewCollection.Remove(View) ViewCollection.RenderCore(IContext) ViewCollection.HitTest(Point) View.Parent View.Frame View.Margin View.HorizontalAlignment View.VerticalAlignment View.Direction View.WritingMode View.Flow View.MinimumWidth View.MinimumHeight View.MaximumWidth View.MaximumHeight View.Update(LayoutGuide) View.Measure(Size) View.Arrange(Rect) View.Render(IContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks If the parent provides a constrained height, the container divides the available height equally among all children. If the height is unconstrained (infinite), the container measures each child to determine the maximum height, and uses that height for all rows. Methods ArrangeCore(Rect) Arranges the children into vertically stacked rows of equal height. protected override void ArrangeCore(Rect rect) Parameters rect Rect The rectangle within which to arrange children. MeasureCore(Size) Measures the desired size of this layout container and its children, based on the available space provided by the parent. protected override Size MeasureCore(Size availableBorderEdgeSize) Parameters availableBorderEdgeSize Size The space available for layout, excluding padding and borders. Returns Size The desired size of this container based on its layout strategy."
  },
  "api/Xui.Core.UI.View.html": {
    "href": "api/Xui.Core.UI.View.html",
    "title": "Class View | XUI APPS",
    "summary": "Class View Namespace Xui.Core.UI Assembly Core.dll Base class for all UI elements in the Xui layout engine. A view participates in layout, rendering, and input hit testing, and may contain child views. public abstract class View Inheritance object View Derived ViewCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Returns the number of child views. Used by layout containers and traversal logic. Leaf views should return 0. public virtual int Count { get; } Property Value int Direction The writing direction of this view, which determines the block or inline flow direction. Inherited from the parent flow context if set to Inherit. public Direction Direction { get; set; } Property Value Direction Flow Controls how the layout system treats this view's children. Can be inherited or explicitly overridden for advanced layout containers. public Flow Flow { get; set; } Property Value Flow Frame The border edge of this view in global coordinates relative to the top-left of the window. public Rect Frame { get; protected set; } Property Value Rect HorizontalAlignment The horizontal alignment of this view inside its layout anchor region. Used during layout when the view has remaining space within its container. public HorizontalAlignment HorizontalAlignment { get; set; } Property Value HorizontalAlignment this[int] Indexer to access child views by index. Layout containers should implement this to expose their children. public virtual View this[int index] { get; } Parameters index int Property Value View Margin The margin around this view. Margins participate in collapsed margin logic during layout, and are external spacing relative to the parent or surrounding siblings. public Frame Margin { get; set; } Property Value Frame MaximumHeight The maximum height of the border edge box. public NFloat MaximumHeight { get; set; } Property Value NFloat MaximumWidth The maximum width of the border edge box. public NFloat MaximumWidth { get; set; } Property Value NFloat MinimumHeight The minimum height of the border edge box. public NFloat MinimumHeight { get; set; } Property Value NFloat MinimumWidth The minimum width of the border edge box. public NFloat MinimumWidth { get; set; } Property Value NFloat Parent The parent view in the visual hierarchy. This is set automatically when the view is added to a container. public View? Parent { get; } Property Value View VerticalAlignment The vertical alignment of this view inside its layout anchor region. Used during layout when the view has remaining space within its container. public VerticalAlignment VerticalAlignment { get; set; } Property Value VerticalAlignment WritingMode The writing mode of this view (e.g. horizontal top-to-bottom or vertical right-to-left). Inherited from the parent if set to Inherit. public WritingMode WritingMode { get; set; } Property Value WritingMode Methods Arrange(Rect) Arranges the view within the specified rectangle, finalizing its layout position and size. public Rect Arrange(Rect rect) Parameters rect Rect The rectangle defining the position and exact size for the view. Returns Rect The rectangle occupied by the arranged view. ArrangeCore(Rect) Performs the layout pass by arranging content and children within the view's border edge box, using the provided rectangle. protected virtual void ArrangeCore(Rect rect) Parameters rect Rect The final rectangle (position and size) allocated to this view's border edge box. HitTest(Point) Determines whether the given point (in local coordinates) hits this view’s visual bounds. Used for input dispatch and hit testing. public virtual bool HitTest(Point point) Parameters point Point The point to test, relative to this view’s coordinate space. Returns bool true if the point is inside the view’s frame; otherwise false. Measure(Size) Measures the view using the specified available size, returning the desired size calculated during the layout pass. public Size Measure(Size availableSize) Parameters availableSize Size The maximum space available for the view to occupy. Returns Size The size that the view desires to occupy within the constraints. MeasureCore(Size) Determines the minimum size that this view's border edge box requires, given the maximum available size. Margin is not part of this size. protected virtual Size MeasureCore(Size availableBorderEdgeSize) Parameters availableBorderEdgeSize Size The maximum size available for the view’s border edge box. This size excludes margins, which are handled by the parent layout. Returns Size The desired size of the border edge box based on content and layout logic. Render(IContext) Renders the view using the given rendering context. This should be called after layout is complete. public void Render(IContext context) Parameters context IContext The rendering context used to draw the view. RenderCore(IContext) Renders the content and children of this view using the provided rendering context. protected virtual void RenderCore(IContext context) Parameters context IContext The drawing context used for rendering visual content to the output surface. Update(LayoutGuide) Performs a full layout pass for a view - measure, arrange and render. Flags can limit to a subset of the layout passes, in case a container needs to measure children multiple times, or in case a container can rush forward without forking the layout pass into multiple sub-passes. The layout method will delegate parts of the execution to MeasureCore(Size), ArrangeCore(Rect) and RenderCore(IContext). If a container needs to call multiple times methods for a child, either call the Measure(Size), Arrange(Rect) and Render(IContext), or construct a LayoutGuide with the specific flags and pass it to Update(LayoutGuide). Some containers may override and implement a Layout in a way, that it compacts the flow and avoids fork, like a VerticalStack that is placed on fullscreen (with fixed width), can arrange children top to bottom calling their Layout directly - eventually going foreach-layout without splitting into foreach-measure, foreach-arrange cycles. VerticalStack however, when centered, while it can layout children vertically in a single pass, it can't render, because it needs its height to figure out its position, so in these cases it may foreach-layout (measure and arrange) resolve the stack Y position and then foreach-layout (for render). public virtual LayoutGuide Update(LayoutGuide guide) Parameters guide LayoutGuide Returns LayoutGuide"
  },
  "api/Xui.Core.UI.ViewCollection.html": {
    "href": "api/Xui.Core.UI.ViewCollection.html",
    "title": "Class ViewCollection | XUI APPS",
    "summary": "Class ViewCollection Namespace Xui.Core.UI Assembly Core.dll A base class for container views that hold and manage a list of child views. Provides methods for adding, removing, rendering, and hit testing children. public abstract class ViewCollection : View Inheritance object View ViewCollection Derived HorizontalStack HorizontalUniformStack VerticalStack VerticalUniformStack Inherited Members View.Parent View.Frame View.Margin View.HorizontalAlignment View.VerticalAlignment View.Direction View.WritingMode View.Flow View.MinimumWidth View.MinimumHeight View.MaximumWidth View.MaximumHeight View.Update(LayoutGuide) View.Measure(Size) View.Arrange(Rect) View.Render(IContext) View.MeasureCore(Size) View.ArrangeCore(Rect) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields children The internal list of child views contained within this view. protected readonly List<View> children Field Value List<View> Properties Content Adds the provided views to this container during object initialization. This property is intended for use with C# object initializers and will not clear existing children. public ReadOnlySpan<View> Content { init; } Property Value ReadOnlySpan<View> Count Gets the number of child views in this collection. public override int Count { get; } Property Value int this[int] Gets the child view at the specified index. public override View this[int index] { get; } Parameters index int The index of the child to retrieve. Property Value View The child view at the given index. Methods Add(View) Adds a view to this container. public virtual void Add(View child) Parameters child View The view to add. Exceptions InvalidOperationException Thrown if the view already has a parent. HitTest(Point) Performs hit testing against the child views in reverse order (top-most first). public override bool HitTest(Point point) Parameters point Point The point to test, in the coordinate space of this view. Returns bool True if any child was hit; otherwise, falls back to base implementation. Remove(View) Removes a view from this container. public virtual void Remove(View child) Parameters child View The view to remove. RenderCore(IContext) Renders all child views using the provided rendering context. protected override void RenderCore(IContext context) Parameters context IContext The rendering context used for drawing visual content."
  },
  "api/Xui.Core.UI.WritingMode.html": {
    "href": "api/Xui.Core.UI.WritingMode.html",
    "title": "Enum WritingMode | XUI APPS",
    "summary": "Enum WritingMode Namespace Xui.Core.UI Assembly Core.dll Specifies the orientation and flow direction of text and block layout. Affects which axis is considered \"block\" and \"inline\". public enum WritingMode : byte Fields HorizontalTB = 1 Horizontal writing mode. Text flows left-to-right, lines stack top-to-bottom. Inherit = 0 Inherit direction from the parent view. SidewaysLR = 5 Sideways vertical mode. Lines stack left-to-right, with horizontal glyph orientation. SidewaysRL = 4 Sideways vertical mode. Lines stack right-to-left, but glyphs are rotated to remain horizontal. VerticalLR = 3 Vertical writing mode. Lines stack left-to-right, text flows top-to-bottom. VerticalRL = 2 Vertical writing mode. Lines stack right-to-left, text flows top-to-bottom."
  },
  "api/Xui.Core.UI.html": {
    "href": "api/Xui.Core.UI.html",
    "title": "Namespace Xui.Core.UI | XUI APPS",
    "summary": "Namespace Xui.Core.UI Classes HorizontalStack A layout container that arranges its children horizontally from left to right. Each child is measured with unconstrained width and a constrained height. The container expands to fit the combined width of all children. HorizontalUniformStack A layout container that arranges its children in a horizontal stack, assigning each child the same width. VerticalStack A layout container that arranges its children vertically from top to bottom. Each child is measured with an unconstrained height and is allowed to take up as much vertical space as needed. The container expands to fit the combined height of all children. VerticalUniformStack A layout container that arranges its children in a vertical stack, giving each child the same height. View Base class for all UI elements in the Xui layout engine. A view participates in layout, rendering, and input hit testing, and may contain child views. ViewCollection A base class for container views that hold and manage a list of child views. Provides methods for adding, removing, rendering, and hit testing children. Structs LayoutGuide Encapsulates the parameters and results of a layout pass (Measure, Arrange, Render) for a view. Enums Direction Indicates the semantic inline direction of content, such as left-to-right or right-to-left. Used to resolve text alignment, layout flow, and mirroring behavior. Flow Controls whether layout and rendering should respect directionality and writing mode. Used to suppress mirroring and bidi-aware behavior for diagrams, graphs, and non-linguistic views. FlowDirection Represents the resolved physical direction of layout flow along an axis. This is derived from WritingMode and Direction, and is used to control stacking, alignment, and layout flow along block or inline axes. HorizontalAlignment Specifies how a view should be aligned horizontally within its layout bounds. Used by parent containers during layout to position the view along the inline axis. LayoutGuide.Align Defines alignment of a view within a layout axis. LayoutGuide.LayoutPass Flags indicating which type of layout pass is being performed. Multiple passes may be combined (e.g., Measure | Render). LayoutGuide.SizeTo Defines how the view should interpret the size constraints during measurement. VerticalAlignment Specifies how a view should be aligned vertically within its layout bounds. Used by parent containers to control vertical positioning along the block axis. WritingMode Specifies the orientation and flow direction of text and block layout. Affects which axis is considered \"block\" and \"inline\"."
  },
  "api/Xui.Core.html": {
    "href": "api/Xui.Core.html",
    "title": "Namespace Xui.Core | XUI APPS",
    "summary": "Namespace Xui.Core Namespaces Xui.Core.Abstract Xui.Core.Actual Xui.Core.Animation Xui.Core.Canvas Xui.Core.Curves2D Xui.Core.Math2D Xui.Core.Set Xui.Core.UI"
  },
  "api/Xui.Middleware.Emulator.Actual.EmulatorPlatform.html": {
    "href": "api/Xui.Middleware.Emulator.Actual.EmulatorPlatform.html",
    "title": "Class EmulatorPlatform | XUI APPS",
    "summary": "Class EmulatorPlatform Namespace Xui.Middleware.Emulator.Actual Assembly Xui.Middleware.Emulator.dll A runtime middleware layer that intercepts platform calls to inject emulator behavior. This class wraps a base platform implementation (e.g., Windows or macOS) and adapts it to simulate a mobile device environment for desktop testing. public class EmulatorPlatform : IRuntime Inheritance object EmulatorPlatform Implements IRuntime Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmulatorPlatform(IRuntime) Initializes a new EmulatorPlatform that wraps the specified base platform runtime. public EmulatorPlatform(IRuntime basePlatform) Parameters basePlatform IRuntime The platform-specific runtime to wrap (e.g., Windows, macOS). Properties DrawingContext Gets the drawing context from the base platform. public IContext DrawingContext { get; } Property Value IContext MainDispatcher Gets the main thread dispatcher from the base platform. public IDispatcher MainDispatcher { get; } Property Value IDispatcher Methods CreateRunloop(Application) Forwards run loop creation directly to the base platform. public IRunLoop CreateRunloop(Application applicationAbstract) Parameters applicationAbstract Application The abstract application instance. Returns IRunLoop The native run loop for the base platform. CreateWindow(IWindow) Intercepts window creation to insert a simulated mobile emulator window between the abstract and platform layers. The created window wraps the base platform window with an EmulatorWindow, allowing for input redirection, visual chrome, and runtime controls (e.g., orientation switching). public IWindow CreateWindow(IWindow windowAbstract) Parameters windowAbstract IWindow The abstract window defined by the application. Returns IWindow An actual window with emulator middleware applied."
  },
  "api/Xui.Middleware.Emulator.Actual.EmulatorWindow.html": {
    "href": "api/Xui.Middleware.Emulator.Actual.EmulatorWindow.html",
    "title": "Class EmulatorWindow | XUI APPS",
    "summary": "Class EmulatorWindow Namespace Xui.Middleware.Emulator.Actual Assembly Xui.Middleware.Emulator.dll A middleware window that wraps a platform window to simulate a mobile device environment when running on desktop platforms like Windows or macOS. This class implements both IWindow and IWindow, acting as a bridge between the abstract UI and the actual system window. It also implements IWindow.IDesktopStyle to provide emulator-specific chrome styling and sizing. The window draws a rounded-rectangle phone frame, overlays controls like battery and signal indicators, and translates desktop mouse events into synthetic mobile touch input. public class EmulatorWindow : IWindow, IWindow, IWindow.IDesktopStyle Inheritance object EmulatorWindow Implements IWindow IWindow IWindow.IDesktopStyle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmulatorWindow() public EmulatorWindow() Properties Abstract The abstract window instance from the application layer. public IWindow? Abstract { get; set; } Property Value IWindow DisplayArea The display area available to the app inside the mobile frame (excluding chrome). public Rect DisplayArea { get; set; } Property Value Rect Platform The underlying platform window from the base runtime. public IWindow? Platform { get; set; } Property Value IWindow RequireKeyboard Whether the virtual keyboard is requested by the app. public bool RequireKeyboard { get; set; } Property Value bool SafeArea The safe area that excludes OS bars, camera notches, etc. public Rect SafeArea { get; set; } Property Value Rect"
  },
  "api/Xui.Middleware.Emulator.Actual.html": {
    "href": "api/Xui.Middleware.Emulator.Actual.html",
    "title": "Namespace Xui.Middleware.Emulator.Actual | XUI APPS",
    "summary": "Namespace Xui.Middleware.Emulator.Actual Classes EmulatorPlatform A runtime middleware layer that intercepts platform calls to inject emulator behavior. This class wraps a base platform implementation (e.g., Windows or macOS) and adapts it to simulate a mobile device environment for desktop testing. EmulatorWindow A middleware window that wraps a platform window to simulate a mobile device environment when running on desktop platforms like Windows or macOS. This class implements both IWindow and IWindow, acting as a bridge between the abstract UI and the actual system window. It also implements IWindow.IDesktopStyle to provide emulator-specific chrome styling and sizing. The window draws a rounded-rectangle phone frame, overlays controls like battery and signal indicators, and translates desktop mouse events into synthetic mobile touch input."
  },
  "api/Xui.html": {
    "href": "api/Xui.html",
    "title": "Namespace Xui | XUI APPS",
    "summary": "Namespace Xui Namespaces Xui.Core Xui.Middleware.Emulator.Actual"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | XUI APPS",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | XUI APPS",
    "summary": "Introduction"
  }
}